#!/usr/bin/env groovy
// This shared library is available at https://github.com/ROCmSoftwarePlatform/rocJENKINS/
@Library('rocJenkins@tblas') _

// This file is for internal AMD use.
// If you are interested in running your own Jenkins, please raise a github issue for assistance.

import com.amd.project.*
import com.amd.docker.*

////////////////////////////////////////////////////////////////////////
// Mostly generated from snippet generator 'properties; set job properties'
// Time-based triggers added to execute nightly tests, eg '30 2 * * *' means 2:30 AM
properties([
    pipelineTriggers([cron('0 3 * * *'), [$class: 'PeriodicFolderTrigger', interval: '5m']]),
    buildDiscarder(logRotator(
      artifactDaysToKeepStr: '',
      artifactNumToKeepStr: '',
      daysToKeepStr: '',
      numToKeepStr: '10')),
    disableConcurrentBuilds(),
    [$class: 'CopyArtifactPermissionProperty', projectNames: '*']
   ])


////////////////////////////////////////////////////////////////////////
import java.nio.file.Path;

tensileCI:
{
    def rocblas = new rocProject('rocBLAS')
    
    // Define test architectures, optional rocm version argument is available
    def nodes = new dockerNodes(['gfx900 && ubuntu','gfx906 && ubuntu'], rocblas)

    boolean formatCheck = false

    rocblas.timeout.test = 600

    def compileCommand = 
    {
        platform, project->
        
        project.paths.construct_build_prefix()
        
        def rocblasCheckout = platform.checkoutSecondaryProject(project.name)

        rocblas.paths.build_command = platform.jenkinsLabel.contains('hip-clang') ? "./install.sh -lasm_ci -c -t${project.paths.project_build_prefix}/../../../../.. --hip-clang" : "./install.sh -lasm_ci -c -t${project.paths.project_build_prefix}/../../../../.."
        rocblas.compiler.compiler_path = platform.jenkinsLabel.contains('hip-clang') ? '/opt/rocm/bin/hipcc' : '/opt/rocm/bin/hcc'        
        String sudo = platform.jenkinsLabel.contains('sles') ? 'sudo' : ''        
                
        def command = """#!/usr/bin/env bash
                    set -x
                    cd ${project.paths.project_build_prefix}
                    ${rocblasCheckout}
                    cd ${project.name}
                    export PATH=/opt/rocm/bin:$PATH
                    LD_LIBRARY_PATH=/opt/rocm/hcc/lib CXX=${rocblas.compiler.compiler_path} ${sudo} ${project.paths.build_command}
                """
    
        platform.runCommand(this, command)
    }

    def testCommand = 
    {
        platform, project->

        String sudo = auxiliary.sudo(platform.jenkinsLabel)
        
        try
        {
            def command = """#!/usr/bin/env bash
                        set -x
                        cd ${project.paths.project_build_prefix}/../../../../build/release/clients/staging
                        LD_LIBRARY_PATH=/opt/rocm/hcc/lib ${sudo} ./example-sscal
                        LD_LIBRARY_PATH=/opt/rocm/hcc/lib GTEST_LISTENER=NO_PASS_LINE_IN_LOG ${sudo} ./rocblas-test --gtest_output=xml --gtest_color=yes  --gtest_filter=-*known_bug*
                    """
            
            platform.runCommand(this, command)
        }
        finally
        {
            junit "${project.paths.project_build_prefix}/../../../../build/release/clients/staging/*.xml"
        }
    }
    
    def packageCommand = null
    
    buildProject(rocblas, formatCheck, nodes.dockerArray, compileCommand, testCommand, packageCommand)

}

