#!/usr/bin/env groovy
// This shared library is available at https://github.com/ROCmSoftwarePlatform/rocJENKINS/
@Library('rocJenkins') _

// This file is for internal AMD use.
// If you are interested in running your own Jenkins, please raise a github issue for assistance.

import com.amd.project.*
import com.amd.docker.*

////////////////////////////////////////////////////////////////////////
// Mostly generated from snippet generator 'properties; set job properties'
// Time-based triggers added to execute nightly tests, eg '30 2 * * *' means 2:30 AM
properties([
    pipelineTriggers([cron('0 3 * * *'), [$class: 'PeriodicFolderTrigger', interval: '5m']]),
    buildDiscarder(logRotator(
      artifactDaysToKeepStr: '',
      artifactNumToKeepStr: '',
      daysToKeepStr: '',
      numToKeepStr: '10')),
    disableConcurrentBuilds(),
    [$class: 'CopyArtifactPermissionProperty', projectNames: '*']
   ])


////////////////////////////////////////////////////////////////////////
import java.nio.file.Path;

tensileCI:
{
    def tensile = new rocProject('rocBLAS')
    
    // Define test architectures, optional rocm version argument is available
    def nodes = new dockerNodes(['gfx900 && ubuntu','gfx906 && ubuntu'], tensile)

    boolean formatCheck = false

    tensile.timeout.test = 600

    def compileCommand = 
    {
        platform, project->
        
        def rocblasCommand = platform.buildRocblas("${project.paths.project_build_prefix}", platform.jenkinsLabel)
    
        platform.runCommand(this, rocblasCommand)
    }

    def testType = auxiliary.isJobStartedByTimer() ? "nightly" : "checkin"
    def testCommand = 
    {
        platform, project->
        try
        {
            def rocblasCommand = platform.testRocblas(testType,"${project.paths.project_build_prefix}/build/release/clients/staging", platform.jenkinsLabel)
            platform.runCommand(this, rocblasCommand)
        }
        finally
        {
            junit "${project.paths.project_build_prefix}/rocBLAS/build/release/clients/staging/*.xml"
        }
    }
    
    def packageCommand = null
    
    buildProject(tensile, formatCheck, nodes.dockerArray, compileCommand, testCommand, packageCommand)

}

