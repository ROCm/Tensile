

/******************************************/
/* Function Prefix                        */
/******************************************/



/******************************************/
/* Begin Kernel                           */
/******************************************/

.amdgcn_target "amdgcn-amd-amdhsa--gfx908+sram-ecc"
.text
.protected Cijk_Alik_Bljk_BBH_MT32x32x32_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASBE01_ASEM8_BL1_DTL0_EPS1_FL0_GRVW2_GSU1_ISA908_IU1_K1_KLA_LBSPPn1_LPA0_LPB0_LDL1_NLCA1_NLCB1_ONLL1_PBD0_PK0_PGR1_PLR1_RK1_SIA1_SU32_SUM0_SUS256_SNLL0_TT2_2_TLDS0_USFGRO1_VAW1_VS1_VW2_WG16_16_1_WGM8
.globl Cijk_Alik_Bljk_BBH_MT32x32x32_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASBE01_ASEM8_BL1_DTL0_EPS1_FL0_GRVW2_GSU1_ISA908_IU1_K1_KLA_LBSPPn1_LPA0_LPB0_LDL1_NLCA1_NLCB1_ONLL1_PBD0_PK0_PGR1_PLR1_RK1_SIA1_SU32_SUM0_SUS256_SNLL0_TT2_2_TLDS0_USFGRO1_VAW1_VS1_VW2_WG16_16_1_WGM8
.p2align 8
.type Cijk_Alik_Bljk_BBH_MT32x32x32_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASBE01_ASEM8_BL1_DTL0_EPS1_FL0_GRVW2_GSU1_ISA908_IU1_K1_KLA_LBSPPn1_LPA0_LPB0_LDL1_NLCA1_NLCB1_ONLL1_PBD0_PK0_PGR1_PLR1_RK1_SIA1_SU32_SUM0_SUS256_SNLL0_TT2_2_TLDS0_USFGRO1_VAW1_VS1_VW2_WG16_16_1_WGM8,@function
.section .rodata,#alloc
.p2align 6
.amdhsa_kernel Cijk_Alik_Bljk_BBH_MT32x32x32_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASBE01_ASEM8_BL1_DTL0_EPS1_FL0_GRVW2_GSU1_ISA908_IU1_K1_KLA_LBSPPn1_LPA0_LPB0_LDL1_NLCA1_NLCB1_ONLL1_PBD0_PK0_PGR1_PLR1_RK1_SIA1_SU32_SUM0_SUS256_SNLL0_TT2_2_TLDS0_USFGRO1_VAW1_VS1_VW2_WG16_16_1_WGM8
  .amdhsa_user_sgpr_kernarg_segment_ptr 1
  .amdhsa_next_free_vgpr 108 // vgprs
  .amdhsa_next_free_sgpr 98 // sgprs
  .amdhsa_group_segment_fixed_size 36000 // lds bytes
  .amdhsa_private_segment_fixed_size 0
  .amdhsa_system_sgpr_workgroup_id_x 1
  .amdhsa_system_sgpr_workgroup_id_y 1
  .amdhsa_system_sgpr_workgroup_id_z 1
  .amdhsa_system_vgpr_workitem_id 0
.end_amdhsa_kernel
.text

/******************************************/
/* Optimizations and Config:              */
/******************************************/
/* ThreadTile= 2 x 2 */
/* SubGroup= 16 x 16 */
/* VectorWidth=2 */
/* GlobalLoadVectorWidthA=2, GlobalLoadVectorWidthB=2 */
/* DirectToLdsA=False */
/* DirectToLdsB=False */
/* UseSgprForGRO=1 */
.amdgpu_metadata
---
amdhsa.version:
  - 1
  - 0
amdhsa.kernels:
  - .name: Cijk_Alik_Bljk_BBH_MT32x32x32_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASBE01_ASEM8_BL1_DTL0_EPS1_FL0_GRVW2_GSU1_ISA908_IU1_K1_KLA_LBSPPn1_LPA0_LPB0_LDL1_NLCA1_NLCB1_ONLL1_PBD0_PK0_PGR1_PLR1_RK1_SIA1_SU32_SUM0_SUS256_SNLL0_TT2_2_TLDS0_USFGRO1_VAW1_VS1_VW2_WG16_16_1_WGM8
    .symbol: 'Cijk_Alik_Bljk_BBH_MT32x32x32_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASBE01_ASEM8_BL1_DTL0_EPS1_FL0_GRVW2_GSU1_ISA908_IU1_K1_KLA_LBSPPn1_LPA0_LPB0_LDL1_NLCA1_NLCB1_ONLL1_PBD0_PK0_PGR1_PLR1_RK1_SIA1_SU32_SUM0_SUS256_SNLL0_TT2_2_TLDS0_USFGRO1_VAW1_VS1_VW2_WG16_16_1_WGM8.kd'
    .language:                   OpenCL C
    .language_version:
      - 2
      - 0
    .args:
      - .name:            sizeC
        .size:            8
        .offset:          0
        .value_kind:      by_value
        .value_type:      u64
      - .name:            sizeA
        .size:            8
        .offset:          8
        .value_kind:      by_value
        .value_type:      u64
      - .name:            sizeB
        .size:            8
        .offset:          16
        .value_kind:      by_value
        .value_type:      u64
      - .name:            D
        .size:            8
        .offset:          24
        .value_kind:      global_buffer
        .value_type:      struct
        .address_space:   generic
      - .name:            C
        .size:            8
        .offset:          32
        .value_kind:      global_buffer
        .value_type:      struct
        .address_space:   generic
      - .name:            A
        .size:            8
        .offset:          40
        .value_kind:      global_buffer
        .value_type:      struct
        .address_space:   generic
      - .name:            B
        .size:            8
        .offset:          48
        .value_kind:      global_buffer
        .value_type:      struct
        .address_space:   generic
      - .name:            alpha
        .size:            4
        .offset:          56
        .value_kind:      by_value
        .value_type:      f32
      - .name:            beta
        .size:            4
        .offset:          60
        .value_kind:      by_value
        .value_type:      f32
      - .name:            strideD0
        .size:            4
        .offset:          64
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideD1
        .size:            4
        .offset:          68
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideC0
        .size:            4
        .offset:          72
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideC1
        .size:            4
        .offset:          76
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideA0
        .size:            4
        .offset:          80
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideA1
        .size:            4
        .offset:          84
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideB0
        .size:            4
        .offset:          88
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideB1
        .size:            4
        .offset:          92
        .value_kind:      by_value
        .value_type:      u32
      - .name:            SizesFree0
        .size:            4
        .offset:          96
        .value_kind:      by_value
        .value_type:      u32
      - .name:            SizesFree1
        .size:            4
        .offset:          100
        .value_kind:      by_value
        .value_type:      u32
      - .name:            SizesFree2
        .size:            4
        .offset:          104
        .value_kind:      by_value
        .value_type:      u32
      - .name:            SizesSum0
        .size:            4
        .offset:          108
        .value_kind:      by_value
        .value_type:      u32
      - .name:            OrigStaggerUIter
        .size:            4
        .offset:          112
        .value_kind:      by_value
        .value_type:      i32
      - .name:            NumWorkGroups0
        .size:            4
        .offset:          116
        .value_kind:      by_value
        .value_type:      u32
      - .name:            NumWorkGroups1
        .size:            4
        .offset:          120
        .value_kind:      by_value
        .value_type:      u32
      - .name:            MagicNumberProblemNumGroupTiles0
        .size:            4
        .offset:          124
        .value_kind:      by_value
        .value_type:      u32
      - .name:            GridNumWorkGroups0
        .size:            4
        .offset:          128
        .value_kind:      by_value
        .value_type:      u32
      - .name:            NumFullBlocks
        .size:            4
        .offset:          132
        .value_kind:      by_value
        .value_type:      u32
      - .name:            WgmRemainder1
        .size:            4
        .offset:          136
        .value_kind:      by_value
        .value_type:      u32
      - .name:            MagicNumberWgmRemainder1
        .size:            4
        .offset:          140
        .value_kind:      by_value
        .value_type:      u32
      - .name:            padding
        .size:            4
        .offset:          144
        .value_kind:      by_value
        .value_type:      u32
    .group_segment_fixed_size:   28672
    .kernarg_segment_align:      8
    .kernarg_segment_size:       152
    .max_flat_workgroup_size:    256
    .private_segment_fixed_size: 0
    .sgpr_count:                 98
    .sgpr_spill_count:           0
    .vgpr_count:                 108
    .vgpr_spill_count:           0
    .wavefront_size:             64
...
.end_amdgpu_metadata
Cijk_Alik_Bljk_BBH_MT32x32x32_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASBE01_ASEM8_BL1_DTL0_EPS1_FL0_GRVW2_GSU1_ISA908_IU1_K1_KLA_LBSPPn1_LPA0_LPB0_LDL1_NLCA1_NLCB1_ONLL1_PBD0_PK0_PGR1_PLR1_RK1_SIA1_SU32_SUM0_SUS256_SNLL0_TT2_2_TLDS0_USFGRO1_VAW1_VS1_VW2_WG16_16_1_WGM8:

/******************************************/
/* Asm syntax workarounds                 */
/******************************************/
.macro _v_add_co_u32 dst, cc, src0, src1, dpp=
   v_add_co_u32 \dst, \cc, \src0, \src1 \dpp
.endm
.macro _v_sub_co_u32 dst, cc, src0, src1, dpp=
   v_sub_co_u32 \dst, \cc, \src0, \src1 \dpp
.endm
.macro _v_addc_co_u32 dst, ccOut, src0, ccIn, src1, dpp=
   v_addc_co_u32 \dst, \ccOut, \src0, \ccIn, \src1 \dpp
.endm
.macro _v_add_lshl_u32 dst, src0, src1, shiftCnt
    v_add_lshl_u32 \dst, \src0, \src1, \shiftCnt
.endm
.macro _v_lshl_add_u32 dst, src0, src1, shiftCnt
    v_lshl_add_u32 \dst, \src0, \src1, \shiftCnt
.endm

/******************************************/
/* Bits 127:96 of SRD.  Set DataFormat = 32 bit */
/******************************************/
.set Srd127_96, 0x0020000
.set BufferOOB, 0x80000000
/******************************************/
/* 2GB limit - set offsets to -1 to exceed this and clamp */
/******************************************/
.set BufferLimit, 0x80000000

.macro GLOBAL_OFFSET_A vgprAddr vgprOffsetL vgprOffset0I vgprTmp
v_mul_lo_u32 v[\vgprTmp+0], s[sgprStridesA+0], v[\vgprOffset0I] // mul d1 lower
_v_add_co_u32 v[\vgprAddr+0], vcc, v[\vgprTmp+0], v[\vgprOffsetL] // accumulate d1 lower
_v_add_co_u32 v[\vgprAddr+0], vcc, 0x4, v[\vgprAddr+0] // add prepad for pointer shift
v_lshlrev_b32 v[\vgprAddr+0], 0x1, v[\vgprAddr+0]  // offset *= bytes/element
.endm

/* Global Offset B */
.macro GLOBAL_OFFSET_B vgprAddr vgprOffset1J vgprOffsetL vgprTmp
v_mul_lo_u32 v[\vgprTmp+0], s[sgprStridesB+0], v[\vgprOffsetL] // mul d1 lower
_v_add_co_u32 v[\vgprAddr+0], vcc, v[\vgprTmp+0], v[\vgprOffset1J] // accumulate d1 lower
_v_add_co_u32 v[\vgprAddr+0], vcc, 0x4, v[\vgprAddr+0] // add prepad for pointer shift
v_lshlrev_b32 v[\vgprAddr+0], 0x1, v[\vgprAddr+0]  // offset *= bytes/element
.endm

  //tail-kernel start
  //tail kernel problem size 64x1024
  // use 64 CU(s) for tail kernel
  // tile size = 32x32
  // 64 CU(s) are split into 2 groups of 32
  // CU[0-31] = A[0-31]xB[0-1024]  CU[32-63] = A[32-63]xB[0-1024]
  // B matrix organized as 32 tiles of 32x1024 mapped to CU[0-63], each cU working on 32 columns (y dimension)
  // A matrix organized as 2 tiles of 32x1024  , each CU[0-31] responsible for 32 rows
  // Sub-tile/SIMD organization
  // each 32x32 tile in CU split into 2 groups of 16x16  and simds split into 2 groups
  // simd(s) use 16x16 mfma instruction to solve 32x32 tile simd[0,1] multiply first [0-15] rows with B[0-31]

   //TODO
   // convert buffer_load_dword into bufffer_load_dwordx4
   // Use SGPR for offset to avoid using 4 VALU global fetch pointer increment
   // move Store C address calculation interleaved with noLoadLoop

//////sreg def/////////////
.set sgprKernArgAddress , 0
.set sgprWorkGroup0 , 2
.set sgprWorkGroup1 , 3
.set sgprWorkGroup2 , 4
.set sgprNumWorkGroups0,5
.set sgprNumWorkGroups1,6
.set sgprSrdA,8
.set sgprSrdB,12
.set sgprSrdC,16
.set sgprSrdD,20
.set sgprTensor2dSizeC, 24
.set sgprTensor2dSizeA, 26
.set sgprTensor2dSizeB, 28
.set sgprSaveExecMask, 30
.set sgprAddressD, 32
.set sgprAddressC, 34
.set sgprStridesD, 36
.set sgprStridesC, 38
.set sgprAlpha, 40
.set sgprBeta, 41
.set sgprSizesFree , 42
.set sgprSizesSum  , 45
.set sgprLoopCounters, 46
.set sgprOrigLoopCounter, 47
.set sgprStridesA, 48
.set sgprStridesB, 50
.set sgprAddressA, 52
.set sgprAddressB, 54
.set sgprShadowLimitA, 56
.set sgprShadowLimitB, 58
.set sgprOrigStaggerUIter, 60
.set sgprStaggerUIter, 61
.set sgprWrapUA, 62
.set sgprWrapUB, 64
.set sgprNumFullBlocks, 66
.set sgprWgmRemainder1, 67
.set sgprMagicNumberWgmRemainder1, 68
.set sgprGlobalReadIncsA, 69
.set sgprGlobalReadIncsB, 70
.set sgprScalarGlobalReadOffsetA,71
.set sgprScalarGlobalReadOffsetB,73
.set sgprLocalWriteAddrA,75
.set sgprLocalWriteAddrB,77
.set sgprGlobalFetchSubGrpId,79
.set sgprWorkGrpIdFlatten , 80
.set sgprtailWorkGrp0,81
.set sgprtailWorkGrp1,82
//sgprs[83-87] used as temp
.set sgprtailSimdTileX,88
.set sgprtailSimdTileY,89

/////vreg def////////////////

.set vgprValuC,0
.set vgprAcc,0
.set vgprValuA_X0_I0,32
.set vgprG2LA,48
.set vgprValuB_X0_I0,52
.set vgprG2LB,68
.set vgprLocalWriteAddrA,76
.set vgprLocalWriteAddrB,78
.set vgprGlobalReadOfvarA,82
.set vgprGlobalReadOfvarB,86
.set vgprLocalReadAddrA,94
.set vgprLocalReadAddrB,96
.set vgprSerial,100
.set vgprGlobalWriteOfvarC,104
.set vgprTmp,105

//** maxVGPR 112 **/
.set lds_pad_tail       , 16
.set lds_pad_qw_tail    , lds_pad_tail >> 2
.set lds_Asize_per_wr_tail   , 256+lds_pad_tail           //each load inst load one 32X4 block.    need contiunous 32X4X2,256    bytes in LDS
.set lds_Asize_per_tailwave , lds_Asize_per_wr_tail * 2   //each wave load 2 32X4 block one time.  need contiunous 32X4X4X2,1024 bytes in LDS
.set lds_Asize_per_tailwg   , lds_Asize_per_tailwave * 4  //WG load 8 32X4 block(64X32) Matrix A to lds for pingpong.
.set lds_Bsize_per_wr_tail   , 256+lds_pad_tail           //each load inst load one 32X4  block.    need contiunous 32X4X2,256     bytes in LDS
.set lds_Bsize_per_tailwave , lds_Bsize_per_wr_tail * 2   //each wave load seperate 32X64 block.    need contiunous 32X4X2X2,512 bytes in LDS
.set lds_Bsize_per_tailwg   , lds_Bsize_per_tailwave * 4  //WG load 64 32X4 block(32X256) Matrix B to lds for pingpong.
.set A_lds_base_addr    , 0
.set B_lds_base_addr_tail    , A_lds_base_addr+lds_Asize_per_tailwg * 8  //in bytes
.set A_lds_simd_offset_tail  , lds_Asize_per_wr_tail*2*2 	//2 loads * 2 SIMD


 //****************
 // start kernel

  s_mov_b32     m0, 0x00003000                          // 000000000000: BEFC00FF 00003000
  v_mov_b32     v100, v0                                // 000000000008: 7EC80300
  v_and_b32     v101, 63, v0                            // 00000000000C: 26CA00BF
  s_load_dword  s26, s[0:1], 0x08                       // 000000000010: C0020680 00000008
  s_load_dword  s27, s[0:1], 0x0c                       // 000000000018: C00206C0 0000000C
  s_load_dword  s52, s[0:1], 0x28                       // 000000000020: C0020D00 00000028
  s_load_dword  s53, s[0:1], 0x2c                       // 000000000028: C0020D40 0000002C
  s_load_dword  s48, s[0:1], 0x50                       // 000000000030: C0020C00 00000050
  s_load_dword  s49, s[0:1], 0x54                       // 000000000038: C0020C40 00000054
  s_load_dword  s50, s[0:1], 0x58                       // 000000000040: C0020C80 00000058
  s_load_dword  s51, s[0:1], 0x5c                       // 000000000048: C0020CC0 0000005C
  s_load_dword  s54, s[0:1], 0x30                       // 000000000050: C0020D80 00000030
  s_load_dword  s55, s[0:1], 0x34                       // 000000000058: C0020DC0 00000034
  s_load_dword  s28, s[0:1], 0x10                       // 000000000060: C0020700 00000010
  s_load_dword  s29, s[0:1], 0x14                       // 000000000068: C0020740 00000014
  v_lshrrev_b32  v2, 6, v100                            // 000000000070: 2004C886
  v_readfirstlane_b32  s79, v2                          // 000000000074: 7E9E0502
  s_and_b32     s88, s79, 1                             // 000000000078: 8658814F
  s_lshr_b32    s89, s79, 1                             // 00000000007C: 8F59814F
  s_mul_i32     s80, s3, 2                              // 000000000080: 92508203
  s_add_i32     s80, s2, s80                            // 000000000084: 81505002
  s_mov_b32     s82, s3                                 // 000000000088: BED20003
  s_mov_b32     s81, s2                                 // 00000000008C: BED10002
  v_accvgpr_write  a0, 0                              // 000000000090: D3D94000 18000080
  v_accvgpr_write  a1, 0                              // 000000000098: D3D94001 18000080
  v_accvgpr_write  a2, 0                              // 0000000000A0: D3D94002 18000080
  v_accvgpr_write  a3, 0                              // 0000000000A8: D3D94003 18000080
  s_waitcnt     lgkmcnt(0)                              // 0000000000B0: BF8CC07F
  s_mov_b32     s8, s52                                 // 0000000000B4: BE880034
  s_mov_b32     s9, s53                                 // 0000000000B8: BE890035
  s_mov_b32     s11, 0x00020000                         // 0000000000BC: BE8B00FF 00020000
  s_sub_u32     s56, s26, s84                           // 0000000000C4: 80B8541A
  s_sub_u32     s57, s26, s85                           // 0000000000C8: 80B9551A
  s_lshl_b64    s[56:57], s[56:57], 1                   // 0000000000CC: 8EB88138
  s_add_u32     s56, s56, 4                             // 0000000000D0: 80388438
  s_addc_u32    s57, s57, 0                             // 0000000000D4: 82398039
  s_cmp_eq_u32  s57, 0                                  // 0000000000D8: BF068039
  s_cselect_b32  s10, s56, 0x80000000                   // 0000000000DC: 850AFF38 80000000
  s_mov_b32     s10, 0x80000000                         // 0000000000E4: BE8A00FF 80000000
  s_mul_i32     s84, s81, 32                            // 0000000000EC: 9254A051
  s_mul_i32     s84, s48, s84                           // 0000000000F0: 92545430
  s_lshl_b32    s83, s79, 3                             // 0000000000F4: 8E53834F
  s_mul_i32     s83, s48, s83                           // 0000000000F8: 92535330
  s_add_i32     s84, s84, s83                           // 0000000000FC: 81545354
  v_lshrrev_b32  v0, 4, v101                            // 000000000100: 2000CA84
  v_mul_lo_u32  v4, s48, v0                             // 000000000104: D2850004 00020030
  v_and_b32     v1, 15, v101                            // 00000000010C: 2602CA8F
  v_lshlrev_b32  v1, 1, v1                              // 000000000110: 24020281
  v_add_co_u32  v82, vcc, v4, v1                        // 000000000114: 32A40304
  v_add_u32     v82, s84, v82                           // 000000000118: 68A4A454
  v_lshlrev_b32  v82, 1, v82                            // 00000000011C: 24A4A481
  s_lshl_b32    s71, s48, 3                             // 000000000120: 8E478330
  s_sub_u32     s71, s71, 0x00000110                    // 000000000124: 80C7FF47 00000110
  v_add_u32     v83, s71, v82                           // 00000000012C: 68A6A447
  s_mov_b32     s75, 0x00000220                         // 000000000130: BECB00FF 00000220
  s_mul_i32     s75, s79, s75                           // 000000000138: 924B4B4F
  s_mov_b32     s12, s54                                // 00000000013C: BE8C0036
  s_mov_b32     s13, s55                                // 000000000140: BE8D0037
  s_mov_b32     s15, 0x00020000                         // 000000000144: BE8F00FF 00020000
  s_sub_u32     s58, s28, s84                           // 00000000014C: 80BA541C
  s_sub_u32     s59, s28, s85                           // 000000000150: 80BB551C
  s_lshl_b64    s[58:59], s[58:59], 1                   // 000000000154: 8EBA813A
  s_add_u32     s58, s58, 4                             // 000000000158: 803A843A
  s_addc_u32    s59, s59, 0                             // 00000000015C: 823B803B
  s_cmp_eq_u32  s59, 0                                  // 000000000160: BF06803B
  s_cselect_b32  s14, s58, 0x80000000                   // 000000000164: 850EFF3A 80000000
  s_mov_b32     s14, 0x80000000                         // 00000000016C: BE8E00FF 80000000
  s_mul_i32     s84, s82, 32                            // 000000000174: 9254A052
  s_mul_i32     s84, s50, s84                           // 000000000178: 92545432
  s_lshl_b32    s83, s79, 3                             // 00000000017C: 8E53834F
  s_mul_i32     s83, s50, s83                           // 000000000180: 92535332
  s_add_i32     s84, s84, s83                           // 000000000184: 81545354
  v_lshrrev_b32  v2, 4, v101                            // 000000000188: 2004CA84
  v_and_b32     v3, 15, v101                            // 00000000018C: 2606CA8F
  v_lshlrev_b32  v3, 1, v3                              // 000000000190: 24060681
  v_mul_lo_u32  v4, s50, v2                             // 000000000194: D2850004 00020432
  v_add_co_u32  v86, vcc, v4, v3                        // 00000000019C: 32AC0704
  v_add_u32     v86, s84, v86                           // 0000000001A0: 68ACAC54
  v_lshlrev_b32  v86, 1, v86                            // 0000000001A4: 24ACAC81
  s_lshl_b32    s73, s50, 3                             // 0000000001A8: 8E498332
  s_sub_u32     s73, s73, 0x00000110                    // 0000000001AC: 80C9FF49 00000110
  v_add_u32     v87, s73, v86                           // 0000000001B4: 68AEAC49
  s_mov_b32     s77, 0x00000220                         // 0000000001B8: BECD00FF 00000220
  s_mul_i32     s77, s79, s77                           // 0000000001C0: 924D4D4F
  s_add_i32     s77, s77, 0x00004400                    // 0000000001C4: 814DFF4D 00004400
  s_mov_b32     m0, s75                                 // 0000000001CC: BEFC004B
  s_add_i32     s76, s75, 0x00000880                    // 0000000001D0: 814CFF4B 00000880
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 0000000001D8: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 0000000001E0: E0511110 80023153
  s_mov_b32     m0, s77                                 // 0000000001E8: BEFC004D
  s_add_i32     s78, s77, 0x00000880                    // 0000000001EC: 814EFF4D 00000880
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 0000000001F4: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 0000000001FC: E0511110 80034557
  s_load_dword  s32, s[0:1], 0x18                       // 000000000204: C0020800 00000018
  s_load_dword  s33, s[0:1], 0x1c                       // 00000000020C: C0020840 0000001C
  s_load_dword  s34, s[0:1], 0x20                       // 000000000214: C0020880 00000020
  s_load_dword  s35, s[0:1], 0x24                       // 00000000021C: C00208C0 00000024
  s_load_dword  s24, s[0:1], 0x00                       // 000000000224: C0020600 00000000
  s_load_dword  s25, s[0:1], 0x04                       // 00000000022C: C0020640 00000004
  s_load_dword  s40, s[0:1], 0x38                       // 000000000234: C0020A00 00000038
  s_load_dword  s36, s[0:1], 0x40                       // 00000000023C: C0020900 00000040
  s_load_dword  s37, s[0:1], 0x44                       // 000000000244: C0020940 00000044
  s_load_dword  s38, s[0:1], 0x48                       // 00000000024C: C0020980 00000048
  s_load_dword  s39, s[0:1], 0x4c                       // 000000000254: C00209C0 0000004C
  s_load_dword  s42, s[0:1], 0x60                       // 00000000025C: C0020A80 00000060
  s_load_dword  s43, s[0:1], 0x64                       // 000000000264: C0020AC0 00000064
  s_load_dword  s44, s[0:1], 0x68                       // 00000000026C: C0020B00 00000068
  s_load_dword  s45, s[0:1], 0x6c                       // 000000000274: C0020B40 0000006C
  v_and_b32     v105, v101, 15                          // 00000000027C: D1130069 00011F65
  v_mul_lo_u32  v94, 16, v105                           // 000000000284: D285005E 0002D290
  v_lshrrev_b32  v105, 2, v105                          // 00000000028C: 20D2D282
  v_mul_lo_u32  v105, 4, v105                           // 000000000290: D2850069 0002D284
  v_add_u32     v94, v105, v94                          // 000000000298: 68BCBD69
  v_lshrrev_b32  v105, 4, v101                          // 00000000029C: 20D2CA84
  v_add_u32     v94, v105, v94                          // 0000000002A0: 68BCBD69
  v_lshlrev_b32  v94, 2, v94                            // 0000000002A4: 24BCBC82
  v_mov_b32     v96, v94                                // 0000000002A8: 7EC0035E
  s_mul_i32     s83, s89, 0x00000440                    // 0000000002AC: 9253FF59 00000440
  v_add_u32     v94, s83, v94                           // 0000000002B4: 68BCBC53
  v_add_u32     v94, 0, v94                             // 0000000002B8: 68BCBC80
  v_add_u32     v95, 0x00000880, v94                    // 0000000002BC: 68BEBCFF 00000880
  s_mul_i32     s83, s88, 0x00000440                    // 0000000002C4: 9253FF58 00000440
  v_add_u32     v96, s83, v96                           // 0000000002CC: 68C0C053
  v_add_u32     v96, 0x00004400, v96                    // 0000000002D0: 68C0C0FF 00004400
  v_add_u32     v97, 0x00000880, v96                    // 0000000002D8: 68C2C0FF 00000880
  s_mul_i32     s83, 0x00000880, 1                      // 0000000002E0: 925381FF 00000880
  s_add_i32     m0, s75, s83                            // 0000000002E8: 817C534B
  v_add_u32     v82, 64, v82                            // 0000000002EC: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 0000000002F0: 68A6A6C0
  v_add_u32     v86, 64, v86                            // 0000000002F4: 68ACACC0
  v_add_u32     v87, 64, v87                            // 0000000002F8: 68AEAEC0
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 0000000002FC: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 000000000304: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 00000000030C: 817C534D
  s_nop         0x0000                                  // 000000000310: BF800000
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 000000000314: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 00000000031C: E0511110 80034557
  s_mul_i32     s83, 0x00000880, 2                      // 000000000324: 925382FF 00000880
  s_add_i32     m0, s75, s83                            // 00000000032C: 817C534B
  v_add_u32     v82, 64, v82                            // 000000000330: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 000000000334: 68A6A6C0
  v_add_u32     v86, 64, v86                            // 000000000338: 68ACACC0
  v_add_u32     v87, 64, v87                            // 00000000033C: 68AEAEC0
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 000000000340: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 000000000348: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 000000000350: 817C534D
  s_nop         0x0000                                  // 000000000354: BF800000
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 000000000358: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 000000000360: E0511110 80034557
  s_mul_i32     s83, 0x00000880, 3                      // 000000000368: 925383FF 00000880
  s_add_i32     m0, s75, s83                            // 000000000370: 817C534B
  v_add_u32     v82, 64, v82                            // 000000000374: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 000000000378: 68A6A6C0
  v_add_u32     v86, 64, v86                            // 00000000037C: 68ACACC0
  v_add_u32     v87, 64, v87                            // 000000000380: 68AEAEC0
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 000000000384: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 00000000038C: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 000000000394: 817C534D
  s_nop         0x0000                                  // 000000000398: BF800000
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 00000000039C: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 0000000003A4: E0511110 80034557
  s_mul_i32     s83, 0x00000880, 4                      // 0000000003AC: 925384FF 00000880
  s_add_i32     m0, s75, s83                            // 0000000003B4: 817C534B
  v_add_u32     v82, 64, v82                            // 0000000003B8: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 0000000003BC: 68A6A6C0
  v_add_u32     v86, 64, v86                            // 0000000003C0: 68ACACC0
  v_add_u32     v87, 64, v87                            // 0000000003C4: 68AEAEC0
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 0000000003C8: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 0000000003D0: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 0000000003D8: 817C534D
  s_nop         0x0000                                  // 0000000003DC: BF800000
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 0000000003E0: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 0000000003E8: E0511110 80034557
  s_mul_i32     s83, 0x00000880, 5                      // 0000000003F0: 925385FF 00000880
  s_add_i32     m0, s75, s83                            // 0000000003F8: 817C534B
  v_add_u32     v82, 64, v82                            // 0000000003FC: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 000000000400: 68A6A6C0
  v_add_u32     v86, 64, v86                            // 000000000404: 68ACACC0
  v_add_u32     v87, 64, v87                            // 000000000408: 68AEAEC0
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 00000000040C: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 000000000414: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 00000000041C: 817C534D
  s_nop         0x0000                                  // 000000000420: BF800000
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 000000000424: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 00000000042C: E0511110 80034557
  s_mul_i32     s83, 0x00000880, 6                      // 000000000434: 925386FF 00000880
  s_add_i32     m0, s75, s83                            // 00000000043C: 817C534B
  v_add_u32     v82, 64, v82                            // 000000000440: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 000000000444: 68A6A6C0
  v_add_u32     v86, 64, v86                            // 000000000448: 68ACACC0
  v_add_u32     v87, 64, v87                            // 00000000044C: 68AEAEC0
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 000000000450: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 000000000458: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 000000000460: 817C534D
  s_nop         0x0000                                  // 000000000464: BF800000
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 000000000468: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 000000000470: E0511110 80034557
  s_mul_i32     s83, 0x00000880, 7                      // 000000000478: 925387FF 00000880
  s_add_i32     m0, s75, s83                            // 000000000480: 817C534B
  v_add_u32     v82, 64, v82                            // 000000000484: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 000000000488: 68A6A6C0
  v_add_u32     v86, 64, v86                            // 00000000048C: 68ACACC0
  v_add_u32     v87, 64, v87                            // 000000000490: 68AEAEC0
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 000000000494: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 00000000049C: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 0000000004A4: 817C534D
  s_nop         0x0000                                  // 0000000004A8: BF800000
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 0000000004AC: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 0000000004B4: E0511110 80034557
  v_add_u32     v82, 64, v82                            // 0000000004BC: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 0000000004C0: 68A6A6C0
  v_add_u32     v86, 64, v86                            // 0000000004C4: 68ACACC0
  v_add_u32     v87, 64, v87                            // 0000000004C8: 68AEAEC0
  s_waitcnt     lgkmcnt(0)                              // 0000000004CC: BF8CC07F
  s_waitcnt     vmcnt(30)                               // 0000000004D0: BF8C4F7E
  s_barrier                                             // 0000000004D4: BF8A0000
  ds_read_b32   v32, v94                                // 0000000004D8: D86C0000 2000005E
  ds_read_b32   v33, v94 offset:16                      // 0000000004E0: D86C0010 2100005E
  ds_read_b32   v34, v94 offset:32                      // 0000000004E8: D86C0020 2200005E
  ds_read_b32   v35, v94 offset:48                      // 0000000004F0: D86C0030 2300005E
  s_waitcnt     vmcnt(28)                               // 0000000004F8: BF8C4F7C
  s_barrier                                             // 0000000004FC: BF8A0000
  ds_read_b32   v52, v96                                // 000000000500: D86C0000 34000060
  ds_read_b32   v53, v96 offset:16                      // 000000000508: D86C0010 35000060
  ds_read_b32   v54, v96 offset:32                      // 000000000510: D86C0020 36000060
  ds_read_b32   v55, v96 offset:48                      // 000000000518: D86C0030 37000060
  s_mul_i32     s83, 0x00000880, 1                      // 000000000520: 925381FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000528: 68D2BC53
  s_waitcnt     vmcnt(26)                               // 00000000052C: BF8C4F7A
  s_barrier                                             // 000000000530: BF8A0000
  ds_read_b32   v36, v105                               // 000000000534: D86C0000 24000069
  ds_read_b32   v37, v105 offset:16                     // 00000000053C: D86C0010 25000069
  ds_read_b32   v38, v105 offset:32                     // 000000000544: D86C0020 26000069
  ds_read_b32   v39, v105 offset:48                     // 00000000054C: D86C0030 27000069
  v_add_u32     v106, s83, v96                          // 000000000554: 68D4C053
  s_waitcnt     vmcnt(24)                               // 000000000558: BF8C4F78
  s_barrier                                             // 00000000055C: BF8A0000
  ds_read_b32   v56, v106                               // 000000000560: D86C0000 3800006A
  ds_read_b32   v57, v106 offset:16                     // 000000000568: D86C0010 3900006A
  ds_read_b32   v58, v106 offset:32                     // 000000000570: D86C0020 3A00006A
  ds_read_b32   v59, v106 offset:48                     // 000000000578: D86C0030 3B00006A
  s_mul_i32     s83, 0x00000880, 2                      // 000000000580: 925382FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000588: 68D2BC53
  v_add_u32     v106, s83, v96                          // 00000000058C: 68D4C053
  s_waitcnt     vmcnt(22)                               // 000000000590: BF8C4F76
  s_barrier                                             // 000000000594: BF8A0000
  ds_read_b32   v40, v105                               // 000000000598: D86C0000 28000069
  ds_read_b32   v41, v105 offset:16                     // 0000000005A0: D86C0010 29000069
  ds_read_b32   v42, v105 offset:32                     // 0000000005A8: D86C0020 2A000069
  ds_read_b32   v43, v105 offset:48                     // 0000000005B0: D86C0030 2B000069
  s_waitcnt     vmcnt(20)                               // 0000000005B8: BF8C4F74
  s_barrier                                             // 0000000005BC: BF8A0000
  ds_read_b32   v60, v106                               // 0000000005C0: D86C0000 3C00006A
  ds_read_b32   v61, v106 offset:16                     // 0000000005C8: D86C0010 3D00006A
  ds_read_b32   v62, v106 offset:32                     // 0000000005D0: D86C0020 3E00006A
  ds_read_b32   v63, v106 offset:48                     // 0000000005D8: D86C0030 3F00006A
  s_lshr_b32    s46, s45, 5                             // 0000000005E0: 8F2E852D
  s_sub_u32     s46, 0, s46                             // 0000000005E4: 80AE2E80
  s_cmp_eq_u32  s46, 0                                  // 0000000005E8: BF06802E
  s_cbranch_scc1  label_0447                            // 0000000005EC: BF8502CB
label_017C:
  s_waitcnt     0xcf7f                                  // 0000000005F0: BF8CCF7F
  v_mfma_f32_16x16x8bf16  a[0:3], v32, v52, acc[0:3]          // 0000000005F4: D3ED0000 04026920
  s_mul_i32     s83, 0x00000880, 0                      // 0000000005FC: 925380FF 00000880
  s_add_i32     m0, s75, s83                            // 000000000604: 817C534B
  s_nop         0x0000                                  // 000000000608: BF800000
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 00000000060C: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 000000000614: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 00000000061C: 817C534D
  v_add_u32     v82, 64, v82                            // 000000000620: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 000000000624: 68A6A6C0
  s_waitcnt     lgkmcnt(12)                             // 000000000628: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v33, v53, acc[0:3]          // 00000000062C: D3ED0000 04026B21
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 000000000634: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 00000000063C: E0511110 80034557
  v_add_u32     v86, 64, v86                            // 000000000644: 68ACACC0
  v_add_u32     v87, 64, v87                            // 000000000648: 68AEAEC0
  s_waitcnt     lgkmcnt(10)                             // 00000000064C: BF8CCA7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v34, v54, acc[0:3]          // 000000000650: D3ED0000 04026D22
  s_mul_i32     s83, 0x00000880, 3                      // 000000000658: 925383FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000660: 68D2BC53
  s_waitcnt     vmcnt(22)                               // 000000000664: BF8C4F76
  s_barrier                                             // 000000000668: BF8A0000
  ds_read_b32   v44, v105                               // 00000000066C: D86C0000 2C000069
  ds_read_b32   v45, v105 offset:16                     // 000000000674: D86C0010 2D000069
  ds_read_b32   v46, v105 offset:32                     // 00000000067C: D86C0020 2E000069
  ds_read_b32   v47, v105 offset:48                     // 000000000684: D86C0030 2F000069
  s_waitcnt     lgkmcnt(12)                             // 00000000068C: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v35, v55, acc[0:3]          // 000000000690: D3ED0000 04026F23
  v_add_u32     v106, s83, v96                          // 000000000698: 68D4C053
  s_waitcnt     vmcnt(20)                               // 00000000069C: BF8C4F74
  s_barrier                                             // 0000000006A0: BF8A0000
  ds_read_b32   v64, v106                               // 0000000006A4: D86C0000 4000006A
  ds_read_b32   v65, v106 offset:16                     // 0000000006AC: D86C0010 4100006A
  ds_read_b32   v66, v106 offset:32                     // 0000000006B4: D86C0020 4200006A
  ds_read_b32   v67, v106 offset:48                     // 0000000006BC: D86C0030 4300006A
  s_add_u32     s46, s46, 1                             // 0000000006C4: 802E812E
  s_waitcnt     0xcf7f                                  // 0000000006C8: BF8CCF7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v36, v56, acc[0:3]          // 0000000006CC: D3ED0000 04027124
  s_mul_i32     s83, 0x00000880, 1                      // 0000000006D4: 925381FF 00000880
  s_add_i32     m0, s75, s83                            // 0000000006DC: 817C534B
  s_nop         0x0000                                  // 0000000006E0: BF800000
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 0000000006E4: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 0000000006EC: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 0000000006F4: 817C534D
  v_add_u32     v82, 64, v82                            // 0000000006F8: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 0000000006FC: 68A6A6C0
  s_waitcnt     lgkmcnt(12)                             // 000000000700: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v37, v57, acc[0:3]          // 000000000704: D3ED0000 04027325
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 00000000070C: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 000000000714: E0511110 80034557
  v_add_u32     v86, 64, v86                            // 00000000071C: 68ACACC0
  v_add_u32     v87, 64, v87                            // 000000000720: 68AEAEC0
  s_waitcnt     lgkmcnt(10)                             // 000000000724: BF8CCA7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v38, v58, acc[0:3]          // 000000000728: D3ED0000 04027526
  s_mul_i32     s83, 0x00000880, 4                      // 000000000730: 925384FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000738: 68D2BC53
  s_waitcnt     vmcnt(22)                               // 00000000073C: BF8C4F76
  s_barrier                                             // 000000000740: BF8A0000
  ds_read_b32   v32, v105                               // 000000000744: D86C0000 20000069
  ds_read_b32   v33, v105 offset:16                     // 00000000074C: D86C0010 21000069
  ds_read_b32   v34, v105 offset:32                     // 000000000754: D86C0020 22000069
  ds_read_b32   v35, v105 offset:48                     // 00000000075C: D86C0030 23000069
  s_waitcnt     lgkmcnt(12)                             // 000000000764: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v39, v59, acc[0:3]          // 000000000768: D3ED0000 04027727
  v_add_u32     v106, s83, v96                          // 000000000770: 68D4C053
  s_waitcnt     vmcnt(20)                               // 000000000774: BF8C4F74
  s_barrier                                             // 000000000778: BF8A0000
  ds_read_b32   v52, v106                               // 00000000077C: D86C0000 3400006A
  ds_read_b32   v53, v106 offset:16                     // 000000000784: D86C0010 3500006A
  ds_read_b32   v54, v106 offset:32                     // 00000000078C: D86C0020 3600006A
  ds_read_b32   v55, v106 offset:48                     // 000000000794: D86C0030 3700006A
  s_add_u32     s46, s46, 1                             // 00000000079C: 802E812E
  s_waitcnt     0xcf7f                                  // 0000000007A0: BF8CCF7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v40, v60, acc[0:3]          // 0000000007A4: D3ED0000 04027928
  s_mul_i32     s83, 0x00000880, 2                      // 0000000007AC: 925382FF 00000880
  s_add_i32     m0, s75, s83                            // 0000000007B4: 817C534B
  s_nop         0x0000                                  // 0000000007B8: BF800000
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 0000000007BC: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 0000000007C4: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 0000000007CC: 817C534D
  v_add_u32     v82, 64, v82                            // 0000000007D0: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 0000000007D4: 68A6A6C0
  s_waitcnt     lgkmcnt(12)                             // 0000000007D8: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v41, v61, acc[0:3]          // 0000000007DC: D3ED0000 04027B29
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 0000000007E4: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 0000000007EC: E0511110 80034557
  v_add_u32     v86, 64, v86                            // 0000000007F4: 68ACACC0
  v_add_u32     v87, 64, v87                            // 0000000007F8: 68AEAEC0
  s_waitcnt     lgkmcnt(10)                             // 0000000007FC: BF8CCA7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v42, v62, acc[0:3]          // 000000000800: D3ED0000 04027D2A
  s_mul_i32     s83, 0x00000880, 5                      // 000000000808: 925385FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000810: 68D2BC53
  s_waitcnt     vmcnt(22)                               // 000000000814: BF8C4F76
  s_barrier                                             // 000000000818: BF8A0000
  ds_read_b32   v36, v105                               // 00000000081C: D86C0000 24000069
  ds_read_b32   v37, v105 offset:16                     // 000000000824: D86C0010 25000069
  ds_read_b32   v38, v105 offset:32                     // 00000000082C: D86C0020 26000069
  ds_read_b32   v39, v105 offset:48                     // 000000000834: D86C0030 27000069
  s_waitcnt     lgkmcnt(12)                             // 00000000083C: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v43, v63, acc[0:3]          // 000000000840: D3ED0000 04027F2B
  v_add_u32     v106, s83, v96                          // 000000000848: 68D4C053
  s_waitcnt     vmcnt(20)                               // 00000000084C: BF8C4F74
  s_barrier                                             // 000000000850: BF8A0000
  ds_read_b32   v56, v106                               // 000000000854: D86C0000 3800006A
  ds_read_b32   v57, v106 offset:16                     // 00000000085C: D86C0010 3900006A
  ds_read_b32   v58, v106 offset:32                     // 000000000864: D86C0020 3A00006A
  ds_read_b32   v59, v106 offset:48                     // 00000000086C: D86C0030 3B00006A
  s_add_u32     s46, s46, 1                             // 000000000874: 802E812E
  s_waitcnt     0xcf7f                                  // 000000000878: BF8CCF7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v44, v64, acc[0:3]          // 00000000087C: D3ED0000 0402812C
  s_mul_i32     s83, 0x00000880, 3                      // 000000000884: 925383FF 00000880
  s_add_i32     m0, s75, s83                            // 00000000088C: 817C534B
  s_nop         0x0000                                  // 000000000890: BF800000
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 000000000894: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 00000000089C: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 0000000008A4: 817C534D
  v_add_u32     v82, 64, v82                            // 0000000008A8: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 0000000008AC: 68A6A6C0
  s_waitcnt     lgkmcnt(12)                             // 0000000008B0: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v45, v65, acc[0:3]          // 0000000008B4: D3ED0000 0402832D
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 0000000008BC: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 0000000008C4: E0511110 80034557
  v_add_u32     v86, 64, v86                            // 0000000008CC: 68ACACC0
  v_add_u32     v87, 64, v87                            // 0000000008D0: 68AEAEC0
  s_waitcnt     lgkmcnt(10)                             // 0000000008D4: BF8CCA7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v46, v66, acc[0:3]          // 0000000008D8: D3ED0000 0402852E
  s_mul_i32     s83, 0x00000880, 6                      // 0000000008E0: 925386FF 00000880
  v_add_u32     v105, s83, v94                          // 0000000008E8: 68D2BC53
  s_waitcnt     vmcnt(22)                               // 0000000008EC: BF8C4F76
  s_barrier                                             // 0000000008F0: BF8A0000
  ds_read_b32   v40, v105                               // 0000000008F4: D86C0000 28000069
  ds_read_b32   v41, v105 offset:16                     // 0000000008FC: D86C0010 29000069
  ds_read_b32   v42, v105 offset:32                     // 000000000904: D86C0020 2A000069
  ds_read_b32   v43, v105 offset:48                     // 00000000090C: D86C0030 2B000069
  s_waitcnt     lgkmcnt(12)                             // 000000000914: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v47, v67, acc[0:3]          // 000000000918: D3ED0000 0402872F
  v_add_u32     v106, s83, v96                          // 000000000920: 68D4C053
  s_waitcnt     vmcnt(20)                               // 000000000924: BF8C4F74
  s_barrier                                             // 000000000928: BF8A0000
  ds_read_b32   v60, v106                               // 00000000092C: D86C0000 3C00006A
  ds_read_b32   v61, v106 offset:16                     // 000000000934: D86C0010 3D00006A
  ds_read_b32   v62, v106 offset:32                     // 00000000093C: D86C0020 3E00006A
  ds_read_b32   v63, v106 offset:48                     // 000000000944: D86C0030 3F00006A
  s_add_u32     s46, s46, 1                             // 00000000094C: 802E812E
  s_waitcnt     0xcf7f                                  // 000000000950: BF8CCF7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v32, v52, acc[0:3]          // 000000000954: D3ED0000 04026920
  s_mul_i32     s83, 0x00000880, 4                      // 00000000095C: 925384FF 00000880
  s_add_i32     m0, s75, s83                            // 000000000964: 817C534B
  s_nop         0x0000                                  // 000000000968: BF800000
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 00000000096C: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 000000000974: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 00000000097C: 817C534D
  v_add_u32     v82, 64, v82                            // 000000000980: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 000000000984: 68A6A6C0
  s_waitcnt     lgkmcnt(12)                             // 000000000988: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v33, v53, acc[0:3]          // 00000000098C: D3ED0000 04026B21
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 000000000994: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 00000000099C: E0511110 80034557
  v_add_u32     v86, 64, v86                            // 0000000009A4: 68ACACC0
  v_add_u32     v87, 64, v87                            // 0000000009A8: 68AEAEC0
  s_waitcnt     lgkmcnt(10)                             // 0000000009AC: BF8CCA7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v34, v54, acc[0:3]          // 0000000009B0: D3ED0000 04026D22
  s_mul_i32     s83, 0x00000880, 7                      // 0000000009B8: 925387FF 00000880
  v_add_u32     v105, s83, v94                          // 0000000009C0: 68D2BC53
  s_waitcnt     vmcnt(22)                               // 0000000009C4: BF8C4F76
  s_barrier                                             // 0000000009C8: BF8A0000
  ds_read_b32   v44, v105                               // 0000000009CC: D86C0000 2C000069
  ds_read_b32   v45, v105 offset:16                     // 0000000009D4: D86C0010 2D000069
  ds_read_b32   v46, v105 offset:32                     // 0000000009DC: D86C0020 2E000069
  ds_read_b32   v47, v105 offset:48                     // 0000000009E4: D86C0030 2F000069
  s_waitcnt     lgkmcnt(12)                             // 0000000009EC: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v35, v55, acc[0:3]          // 0000000009F0: D3ED0000 04026F23
  v_add_u32     v106, s83, v96                          // 0000000009F8: 68D4C053
  s_waitcnt     vmcnt(20)                               // 0000000009FC: BF8C4F74
  s_barrier                                             // 000000000A00: BF8A0000
  ds_read_b32   v64, v106                               // 000000000A04: D86C0000 4000006A
  ds_read_b32   v65, v106 offset:16                     // 000000000A0C: D86C0010 4100006A
  ds_read_b32   v66, v106 offset:32                     // 000000000A14: D86C0020 4200006A
  ds_read_b32   v67, v106 offset:48                     // 000000000A1C: D86C0030 4300006A
  s_add_u32     s46, s46, 1                             // 000000000A24: 802E812E
  s_waitcnt     0xcf7f                                  // 000000000A28: BF8CCF7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v36, v56, acc[0:3]          // 000000000A2C: D3ED0000 04027124
  s_mul_i32     s83, 0x00000880, 5                      // 000000000A34: 925385FF 00000880
  s_add_i32     m0, s75, s83                            // 000000000A3C: 817C534B
  s_nop         0x0000                                  // 000000000A40: BF800000
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 000000000A44: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 000000000A4C: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 000000000A54: 817C534D
  v_add_u32     v82, 64, v82                            // 000000000A58: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 000000000A5C: 68A6A6C0
  s_waitcnt     lgkmcnt(12)                             // 000000000A60: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v37, v57, acc[0:3]          // 000000000A64: D3ED0000 04027325
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 000000000A6C: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 000000000A74: E0511110 80034557
  v_add_u32     v86, 64, v86                            // 000000000A7C: 68ACACC0
  v_add_u32     v87, 64, v87                            // 000000000A80: 68AEAEC0
  s_waitcnt     lgkmcnt(10)                             // 000000000A84: BF8CCA7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v38, v58, acc[0:3]          // 000000000A88: D3ED0000 04027526
  s_mul_i32     s83, 0x00000880, 0                      // 000000000A90: 925380FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000A98: 68D2BC53
  s_waitcnt     vmcnt(22)                               // 000000000A9C: BF8C4F76
  s_barrier                                             // 000000000AA0: BF8A0000
  ds_read_b32   v32, v105                               // 000000000AA4: D86C0000 20000069
  ds_read_b32   v33, v105 offset:16                     // 000000000AAC: D86C0010 21000069
  ds_read_b32   v34, v105 offset:32                     // 000000000AB4: D86C0020 22000069
  ds_read_b32   v35, v105 offset:48                     // 000000000ABC: D86C0030 23000069
  s_waitcnt     lgkmcnt(12)                             // 000000000AC4: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v39, v59, acc[0:3]          // 000000000AC8: D3ED0000 04027727
  v_add_u32     v106, s83, v96                          // 000000000AD0: 68D4C053
  s_waitcnt     vmcnt(20)                               // 000000000AD4: BF8C4F74
  s_barrier                                             // 000000000AD8: BF8A0000
  ds_read_b32   v52, v106                               // 000000000ADC: D86C0000 3400006A
  ds_read_b32   v53, v106 offset:16                     // 000000000AE4: D86C0010 3500006A
  ds_read_b32   v54, v106 offset:32                     // 000000000AEC: D86C0020 3600006A
  ds_read_b32   v55, v106 offset:48                     // 000000000AF4: D86C0030 3700006A
  s_add_u32     s46, s46, 1                             // 000000000AFC: 802E812E
  s_waitcnt     0xcf7f                                  // 000000000B00: BF8CCF7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v40, v60, acc[0:3]          // 000000000B04: D3ED0000 04027928
  s_mul_i32     s83, 0x00000880, 6                      // 000000000B0C: 925386FF 00000880
  s_add_i32     m0, s75, s83                            // 000000000B14: 817C534B
  s_nop         0x0000                                  // 000000000B18: BF800000
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 000000000B1C: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 000000000B24: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 000000000B2C: 817C534D
  v_add_u32     v82, 64, v82                            // 000000000B30: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 000000000B34: 68A6A6C0
  s_waitcnt     lgkmcnt(12)                             // 000000000B38: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v41, v61, acc[0:3]          // 000000000B3C: D3ED0000 04027B29
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 000000000B44: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 000000000B4C: E0511110 80034557
  v_add_u32     v86, 64, v86                            // 000000000B54: 68ACACC0
  v_add_u32     v87, 64, v87                            // 000000000B58: 68AEAEC0
  s_waitcnt     lgkmcnt(10)                             // 000000000B5C: BF8CCA7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v42, v62, acc[0:3]          // 000000000B60: D3ED0000 04027D2A
  s_mul_i32     s83, 0x00000880, 1                      // 000000000B68: 925381FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000B70: 68D2BC53
  s_waitcnt     vmcnt(22)                               // 000000000B74: BF8C4F76
  s_barrier                                             // 000000000B78: BF8A0000
  ds_read_b32   v36, v105                               // 000000000B7C: D86C0000 24000069
  ds_read_b32   v37, v105 offset:16                     // 000000000B84: D86C0010 25000069
  ds_read_b32   v38, v105 offset:32                     // 000000000B8C: D86C0020 26000069
  ds_read_b32   v39, v105 offset:48                     // 000000000B94: D86C0030 27000069
  s_waitcnt     lgkmcnt(12)                             // 000000000B9C: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v43, v63, acc[0:3]          // 000000000BA0: D3ED0000 04027F2B
  v_add_u32     v106, s83, v96                          // 000000000BA8: 68D4C053
  s_waitcnt     vmcnt(20)                               // 000000000BAC: BF8C4F74
  s_barrier                                             // 000000000BB0: BF8A0000
  ds_read_b32   v56, v106                               // 000000000BB4: D86C0000 3800006A
  ds_read_b32   v57, v106 offset:16                     // 000000000BBC: D86C0010 3900006A
  ds_read_b32   v58, v106 offset:32                     // 000000000BC4: D86C0020 3A00006A
  ds_read_b32   v59, v106 offset:48                     // 000000000BCC: D86C0030 3B00006A
  s_add_u32     s46, s46, 1                             // 000000000BD4: 802E812E
  s_waitcnt     0xcf7f                                  // 000000000BD8: BF8CCF7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v44, v64, acc[0:3]          // 000000000BDC: D3ED0000 0402812C
  s_mul_i32     s83, 0x00000880, 7                      // 000000000BE4: 925387FF 00000880
  s_add_i32     m0, s75, s83                            // 000000000BEC: 817C534B
  s_nop         0x0000                                  // 000000000BF0: BF800000
  buffer_load_dword  v48, v82, s[8:11], 0 offen lds     // 000000000BF4: E0511000 80023052
  buffer_load_dword  v49, v83, s[8:11], 0 offen offset:272 lds // 000000000BFC: E0511110 80023153
  s_add_i32     m0, s77, s83                            // 000000000C04: 817C534D
  v_add_u32     v82, 64, v82                            // 000000000C08: 68A4A4C0
  v_add_u32     v83, 64, v83                            // 000000000C0C: 68A6A6C0
  s_waitcnt     lgkmcnt(12)                             // 000000000C10: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v45, v65, acc[0:3]          // 000000000C14: D3ED0000 0402832D
  buffer_load_dword  v68, v86, s[12:15], 0 offen lds    // 000000000C1C: E0511000 80034456
  buffer_load_dword  v69, v87, s[12:15], 0 offen offset:272 lds // 000000000C24: E0511110 80034557
  v_add_u32     v86, 64, v86                            // 000000000C2C: 68ACACC0
  v_add_u32     v87, 64, v87                            // 000000000C30: 68AEAEC0
  s_waitcnt     lgkmcnt(10)                             // 000000000C34: BF8CCA7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v46, v66, acc[0:3]          // 000000000C38: D3ED0000 0402852E
  s_mul_i32     s83, 0x00000880, 2                      // 000000000C40: 925382FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000C48: 68D2BC53
  s_waitcnt     vmcnt(22)                               // 000000000C4C: BF8C4F76
  s_barrier                                             // 000000000C50: BF8A0000
  ds_read_b32   v40, v105                               // 000000000C54: D86C0000 28000069
  ds_read_b32   v41, v105 offset:16                     // 000000000C5C: D86C0010 29000069
  ds_read_b32   v42, v105 offset:32                     // 000000000C64: D86C0020 2A000069
  ds_read_b32   v43, v105 offset:48                     // 000000000C6C: D86C0030 2B000069
  s_waitcnt     lgkmcnt(12)                             // 000000000C74: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v47, v67, acc[0:3]          // 000000000C78: D3ED0000 0402872F
  v_add_u32     v106, s83, v96                          // 000000000C80: 68D4C053
  s_waitcnt     vmcnt(20)                               // 000000000C84: BF8C4F74
  s_barrier                                             // 000000000C88: BF8A0000
  ds_read_b32   v60, v106                               // 000000000C8C: D86C0000 3C00006A
  ds_read_b32   v61, v106 offset:16                     // 000000000C94: D86C0010 3D00006A
  ds_read_b32   v62, v106 offset:32                     // 000000000C9C: D86C0020 3E00006A
  ds_read_b32   v63, v106 offset:48                     // 000000000CA4: D86C0030 3F00006A
  s_add_u32     s46, s46, 1                             // 000000000CAC: 802E812E
  s_cmp_eq_i32  s46, -8                                 // 000000000CB0: BF00C82E
  s_cbranch_scc0  label_017C                            // 000000000CB4: BF84FE4E
  s_waitcnt     lgkmcnt(14)                             // 000000000CB8: BF8CCE7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v32, v52, acc[0:3]          // 000000000CBC: D3ED0000 04026920
  s_waitcnt     lgkmcnt(13)                             // 000000000CC4: BF8CCD7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v33, v53, acc[0:3]          // 000000000CC8: D3ED0000 04026B21
  s_add_u32     s46, s46, 1                             // 000000000CD0: 802E812E
  s_waitcnt     lgkmcnt(12)                             // 000000000CD4: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v34, v54, acc[0:3]          // 000000000CD8: D3ED0000 04026D22
  s_mul_i32     s83, 0x00000880, 3                      // 000000000CE0: 925383FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000CE8: 68D2BC53
  s_waitcnt     vmcnt(18)                               // 000000000CEC: BF8C4F72
  s_barrier                                             // 000000000CF0: BF8A0000
  ds_read_b32   v44, v105                               // 000000000CF4: D86C0000 2C000069
  ds_read_b32   v45, v105 offset:16                     // 000000000CFC: D86C0010 2D000069
  ds_read_b32   v46, v105 offset:32                     // 000000000D04: D86C0020 2E000069
  ds_read_b32   v47, v105 offset:48                     // 000000000D0C: D86C0030 2F000069
  s_waitcnt     0xcf7f                                  // 000000000D14: BF8CCF7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v35, v55, acc[0:3]          // 000000000D18: D3ED0000 04026F23
  v_add_u32     v106, s83, v96                          // 000000000D20: 68D4C053
  s_waitcnt     vmcnt(16)                               // 000000000D24: BF8C4F70
  s_barrier                                             // 000000000D28: BF8A0000
  ds_read_b32   v64, v106                               // 000000000D2C: D86C0000 4000006A
  ds_read_b32   v65, v106 offset:16                     // 000000000D34: D86C0010 4100006A
  ds_read_b32   v66, v106 offset:32                     // 000000000D3C: D86C0020 4200006A
  ds_read_b32   v67, v106 offset:48                     // 000000000D44: D86C0030 4300006A
  s_waitcnt     lgkmcnt(14)                             // 000000000D4C: BF8CCE7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v36, v56, acc[0:3]          // 000000000D50: D3ED0000 04027124
  s_waitcnt     lgkmcnt(13)                             // 000000000D58: BF8CCD7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v37, v57, acc[0:3]          // 000000000D5C: D3ED0000 04027325
  s_add_u32     s46, s46, 1                             // 000000000D64: 802E812E
  s_waitcnt     lgkmcnt(12)                             // 000000000D68: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v38, v58, acc[0:3]          // 000000000D6C: D3ED0000 04027526
  s_mul_i32     s83, 0x00000880, 4                      // 000000000D74: 925384FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000D7C: 68D2BC53
  s_waitcnt     vmcnt(14)                               // 000000000D80: BF8C0F7E
  s_barrier                                             // 000000000D84: BF8A0000
  ds_read_b32   v32, v105                               // 000000000D88: D86C0000 20000069
  ds_read_b32   v33, v105 offset:16                     // 000000000D90: D86C0010 21000069
  ds_read_b32   v34, v105 offset:32                     // 000000000D98: D86C0020 22000069
  ds_read_b32   v35, v105 offset:48                     // 000000000DA0: D86C0030 23000069
  s_waitcnt     0xcf7f                                  // 000000000DA8: BF8CCF7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v39, v59, acc[0:3]          // 000000000DAC: D3ED0000 04027727
  v_add_u32     v106, s83, v96                          // 000000000DB4: 68D4C053
  s_waitcnt     vmcnt(12)                               // 000000000DB8: BF8C0F7C
  s_barrier                                             // 000000000DBC: BF8A0000
  ds_read_b32   v52, v106                               // 000000000DC0: D86C0000 3400006A
  ds_read_b32   v53, v106 offset:16                     // 000000000DC8: D86C0010 3500006A
  ds_read_b32   v54, v106 offset:32                     // 000000000DD0: D86C0020 3600006A
  ds_read_b32   v55, v106 offset:48                     // 000000000DD8: D86C0030 3700006A
  s_waitcnt     lgkmcnt(14)                             // 000000000DE0: BF8CCE7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v40, v60, acc[0:3]          // 000000000DE4: D3ED0000 04027928
  s_waitcnt     lgkmcnt(13)                             // 000000000DEC: BF8CCD7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v41, v61, acc[0:3]          // 000000000DF0: D3ED0000 04027B29
  s_add_u32     s46, s46, 1                             // 000000000DF8: 802E812E
  s_waitcnt     lgkmcnt(12)                             // 000000000DFC: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v42, v62, acc[0:3]          // 000000000E00: D3ED0000 04027D2A
  s_mul_i32     s83, 0x00000880, 5                      // 000000000E08: 925385FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000E10: 68D2BC53
  s_waitcnt     vmcnt(10)                               // 000000000E14: BF8C0F7A
  s_barrier                                             // 000000000E18: BF8A0000
  ds_read_b32   v36, v105                               // 000000000E1C: D86C0000 24000069
  ds_read_b32   v37, v105 offset:16                     // 000000000E24: D86C0010 25000069
  ds_read_b32   v38, v105 offset:32                     // 000000000E2C: D86C0020 26000069
  ds_read_b32   v39, v105 offset:48                     // 000000000E34: D86C0030 27000069
  s_waitcnt     0xcf7f                                  // 000000000E3C: BF8CCF7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v43, v63, acc[0:3]          // 000000000E40: D3ED0000 04027F2B
  v_add_u32     v106, s83, v96                          // 000000000E48: 68D4C053
  s_waitcnt     vmcnt(8)                                // 000000000E4C: BF8C0F78
  s_barrier                                             // 000000000E50: BF8A0000
  ds_read_b32   v56, v106                               // 000000000E54: D86C0000 3800006A
  ds_read_b32   v57, v106 offset:16                     // 000000000E5C: D86C0010 3900006A
  ds_read_b32   v58, v106 offset:32                     // 000000000E64: D86C0020 3A00006A
  ds_read_b32   v59, v106 offset:48                     // 000000000E6C: D86C0030 3B00006A
  s_waitcnt     lgkmcnt(14)                             // 000000000E74: BF8CCE7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v44, v64, acc[0:3]          // 000000000E78: D3ED0000 0402812C
  s_waitcnt     lgkmcnt(13)                             // 000000000E80: BF8CCD7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v45, v65, acc[0:3]          // 000000000E84: D3ED0000 0402832D
  s_add_u32     s46, s46, 1                             // 000000000E8C: 802E812E
  s_waitcnt     lgkmcnt(12)                             // 000000000E90: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v46, v66, acc[0:3]          // 000000000E94: D3ED0000 0402852E
  s_mul_i32     s83, 0x00000880, 6                      // 000000000E9C: 925386FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000EA4: 68D2BC53
  s_waitcnt     vmcnt(6)                                // 000000000EA8: BF8C0F76
  s_barrier                                             // 000000000EAC: BF8A0000
  ds_read_b32   v40, v105                               // 000000000EB0: D86C0000 28000069
  ds_read_b32   v41, v105 offset:16                     // 000000000EB8: D86C0010 29000069
  ds_read_b32   v42, v105 offset:32                     // 000000000EC0: D86C0020 2A000069
  ds_read_b32   v43, v105 offset:48                     // 000000000EC8: D86C0030 2B000069
  s_waitcnt     0xcf7f                                  // 000000000ED0: BF8CCF7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v47, v67, acc[0:3]          // 000000000ED4: D3ED0000 0402872F
  v_add_u32     v106, s83, v96                          // 000000000EDC: 68D4C053
  s_waitcnt     vmcnt(4)                                // 000000000EE0: BF8C0F74
  s_barrier                                             // 000000000EE4: BF8A0000
  ds_read_b32   v60, v106                               // 000000000EE8: D86C0000 3C00006A
  ds_read_b32   v61, v106 offset:16                     // 000000000EF0: D86C0010 3D00006A
  ds_read_b32   v62, v106 offset:32                     // 000000000EF8: D86C0020 3E00006A
  ds_read_b32   v63, v106 offset:48                     // 000000000F00: D86C0030 3F00006A
  s_waitcnt     lgkmcnt(14)                             // 000000000F08: BF8CCE7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v32, v52, acc[0:3]          // 000000000F0C: D3ED0000 04026920
  s_waitcnt     lgkmcnt(13)                             // 000000000F14: BF8CCD7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v33, v53, acc[0:3]          // 000000000F18: D3ED0000 04026B21
  s_add_u32     s46, s46, 1                             // 000000000F20: 802E812E
  s_waitcnt     lgkmcnt(12)                             // 000000000F24: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v34, v54, acc[0:3]          // 000000000F28: D3ED0000 04026D22
  s_mul_i32     s83, 0x00000880, 7                      // 000000000F30: 925387FF 00000880
  v_add_u32     v105, s83, v94                          // 000000000F38: 68D2BC53
  s_waitcnt     vmcnt(2)                                // 000000000F3C: BF8C0F72
  s_barrier                                             // 000000000F40: BF8A0000
  ds_read_b32   v44, v105                               // 000000000F44: D86C0000 2C000069
  ds_read_b32   v45, v105 offset:16                     // 000000000F4C: D86C0010 2D000069
  ds_read_b32   v46, v105 offset:32                     // 000000000F54: D86C0020 2E000069
  ds_read_b32   v47, v105 offset:48                     // 000000000F5C: D86C0030 2F000069
  s_waitcnt     0xcf7f                                  // 000000000F64: BF8CCF7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v35, v55, acc[0:3]          // 000000000F68: D3ED0000 04026F23
  v_add_u32     v106, s83, v96                          // 000000000F70: 68D4C053
  s_waitcnt     vmcnt(0)                                // 000000000F74: BF8C0F70
  s_barrier                                             // 000000000F78: BF8A0000
  ds_read_b32   v64, v106                               // 000000000F7C: D86C0000 4000006A
  ds_read_b32   v65, v106 offset:16                     // 000000000F84: D86C0010 4100006A
  ds_read_b32   v66, v106 offset:32                     // 000000000F8C: D86C0020 4200006A
  ds_read_b32   v67, v106 offset:48                     // 000000000F94: D86C0030 4300006A
  s_waitcnt     lgkmcnt(14)                             // 000000000F9C: BF8CCE7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v36, v56, acc[0:3]          // 000000000FA0: D3ED0000 04027124
  s_waitcnt     lgkmcnt(13)                             // 000000000FA8: BF8CCD7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v37, v57, acc[0:3]          // 000000000FAC: D3ED0000 04027325
  s_waitcnt     lgkmcnt(12)                             // 000000000FB4: BF8CCC7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v38, v58, acc[0:3]          // 000000000FB8: D3ED0000 04027526
  s_waitcnt     lgkmcnt(11)                             // 000000000FC0: BF8CCB7F
  v_mfma_f32_16x16x8bf16  acc[0:3], v39, v59, acc[0:3]          // 000000000FC4: D3ED0000 04027727
  s_waitcnt     lgkmcnt(8)                              // 000000000FCC: BF8CC87F
  v_mfma_f32_16x16x8bf16  acc[0:3], v40, v60, acc[0:3]          // 000000000FD0: D3ED0000 04027928
  s_waitcnt     lgkmcnt(7)                              // 000000000FD8: BF8CC77F
  v_mfma_f32_16x16x8bf16  acc[0:3], v41, v61, acc[0:3]          // 000000000FDC: D3ED0000 04027B29
  s_waitcnt     lgkmcnt(6)                              // 000000000FE4: BF8CC67F
  v_mfma_f32_16x16x8bf16  acc[0:3], v42, v62, acc[0:3]          // 000000000FE8: D3ED0000 04027D2A
  s_waitcnt     lgkmcnt(5)                              // 000000000FF0: BF8CC57F
  v_mfma_f32_16x16x8bf16  acc[0:3], v43, v63, acc[0:3]          // 000000000FF4: D3ED0000 04027F2B
  s_waitcnt     lgkmcnt(3)                              // 000000000FFC: BF8CC37F
  v_mfma_f32_16x16x8bf16  acc[0:3], v44, v64, acc[0:3]          // 000000001000: D3ED0000 0402812C
  s_waitcnt     lgkmcnt(2)                              // 000000001008: BF8CC27F
  v_mfma_f32_16x16x8bf16  acc[0:3], v45, v65, acc[0:3]          // 00000000100C: D3ED0000 0402832D
  s_waitcnt     lgkmcnt(1)                              // 000000001014: BF8CC17F
  v_mfma_f32_16x16x8bf16  acc[0:3], v46, v66, acc[0:3]          // 000000001018: D3ED0000 0402852E
  s_waitcnt     lgkmcnt(0)                              // 000000001020: BF8CC07F
  v_mfma_f32_16x16x8bf16  acc[0:3], v47, v67, acc[0:3]          // 000000001024: D3ED0000 0402872F
  s_mov_b32     s16, s34                                // 00000000102C: BE900022
  s_mov_b32     s17, s35                                // 000000001030: BE910023
  s_mov_b32     s18, 0x80000000                         // 000000001034: BE9200FF 80000000
  s_mov_b32     s19, 0x00020000                         // 00000000103C: BE9300FF 00020000
  s_mov_b32     s20, s32                                // 000000001044: BE940020
  s_mov_b32     s21, s33                                // 000000001048: BE950021
  s_mov_b32     s22, 0x80000000                         // 00000000104C: BE9600FF 80000000
  s_mov_b32     s23, 0x00020000                         // 000000001054: BE9700FF 00020000
  s_mul_hi_u32  s85, s4, s39                            // 00000000105C: 96552704
  s_mul_i32     s84, s4, s39                            // 000000001060: 92542704
  s_lshl_b64    s[84:85], s[84:85], 1                   // 000000001064: 8ED48154
  s_add_u32     s16, s16, s84                           // 000000001068: 80105410
  s_addc_u32    s17, s17, s85                           // 00000000106C: 82115511
  s_add_u32     s20, s20, s84                           // 000000001070: 80145414
  s_addc_u32    s21, s21, s85                           // 000000001074: 82155515
  s_mul_i32     s86, 32, s82                            // 000000001078: 925652A0
  s_mul_hi_u32  s85, s86, s38                           // 00000000107C: 96552656
  s_mul_i32     s84, s86, s38                           // 000000001080: 92542656
  s_lshl_b64    s[84:85], s[84:85], 1                   // 000000001084: 8ED48154
  s_add_u32     s16, s16, s84                           // 000000001088: 80105410
  s_addc_u32    s17, s17, s85                           // 00000000108C: 82115511
  s_add_u32     s20, s20, s84                           // 000000001090: 80145414
  s_addc_u32    s21, s21, s85                           // 000000001094: 82155515
  s_mul_i32     s85, 32, s81                            // 000000001098: 925551A0
  s_mul_i32     s84, s89, 16                            // 00000000109C: 92549059
  s_add_i32     s85, s84, s85                           // 0000000010A0: 81555554
  s_mul_i32     s84, s88, 16                            // 0000000010A4: 92549058
  s_mul_i32     s83, s84, s38                           // 0000000010A8: 92532654
  s_add_i32     s85, s85, s83                           // 0000000010AC: 81555355
  v_and_b32     v3, v101, 15                            // 0000000010B0: D1130003 00011F65
  v_mul_lo_u32  v5, s38, v3                             // 0000000010B8: D2850005 00020626
  v_lshrrev_b32  v4, 4, v101                            // 0000000010C0: 2008CA84
  v_lshlrev_b32  v4, 2, v4                              // 0000000010C4: 24080882
  v_add_u32     v104, v4, v5                            // 0000000010C8: 68D00B04
  v_add_u32     v104, s85, v104                         // 0000000010CC: 68D0D055
  v_lshlrev_b32  v104, 1, v104                          // 0000000010D0: 24D0D081
  v_accvgpr_read  v0, a0                              // 0000000010D4: D3D84000 18000100
  v_accvgpr_read  v1, a1                              // 0000000010DC: D3D84001 18000101
  v_accvgpr_read  v2, a2                              // 0000000010E4: D3D84002 18000102
  v_accvgpr_read  v3, a3                              // 0000000010EC: D3D84003 18000103
  v_lshrrev_b32  v0, 16, v0                             // 0000000010F4: 20000090
  v_lshrrev_b32  v1, 16, v1                             // 0000000010F8: 20020290
  v_lshlrev_b32  v1, 16, v1                             // 0000000010FC: 24020290
  v_or_b32      v0, v0, v1                              // 000000001100: 28000300
  v_lshrrev_b32  v2, 16, v2                             // 000000001104: 20040490
  v_lshrrev_b32  v3, 16, v3                             // 000000001108: 20060690
  v_lshlrev_b32  v3, 16, v3                             // 00000000110C: 24060690
  v_or_b32      v1, v2, v3                              // 000000001110: 28020702
  buffer_store_dwordx2  v[0:1], v104, s[20:23], 0 offen // 000000001114: E0741000 80050068
label_0447:
  s_waitcnt     0x0000                                  // 00000000111C: BF8C0000
  s_endpgm                                              // 000000001120: BF810000
