

/******************************************/
/* Function Prefix                        */
/******************************************/



/******************************************/
/* Begin Kernel                           */
/******************************************/

.amdgcn_target "amdgcn-amd-amdhsa--gfx908+sram-ecc"
.text
.protected Cijk_Alik_Bljk_BBH_MT64x128x64_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASEM8_BL1_DTL0_EPS1_FL0_GRVW4_GSU1_ISA908_IU1_K1_KLA_LPA0_LPB0_LDL1_NLCA1_NLCB1_PBD0_PK0_PGR1_PLR1_RK1_SU32_SNLL0_TT4_4_USFGRO1_VAW1_VW4_WG16_32_1_WGM8
.globl Cijk_Alik_Bljk_BBH_MT64x128x64_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASEM8_BL1_DTL0_EPS1_FL0_GRVW4_GSU1_ISA908_IU1_K1_KLA_LPA0_LPB0_LDL1_NLCA1_NLCB1_PBD0_PK0_PGR1_PLR1_RK1_SU32_SNLL0_TT4_4_USFGRO1_VAW1_VW4_WG16_32_1_WGM8
.p2align 8
.type Cijk_Alik_Bljk_BBH_MT64x128x64_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASEM8_BL1_DTL0_EPS1_FL0_GRVW4_GSU1_ISA908_IU1_K1_KLA_LPA0_LPB0_LDL1_NLCA1_NLCB1_PBD0_PK0_PGR1_PLR1_RK1_SU32_SNLL0_TT4_4_USFGRO1_VAW1_VW4_WG16_32_1_WGM8,@function
.section .rodata,#alloc
.p2align 6
.amdhsa_kernel Cijk_Alik_Bljk_BBH_MT64x128x64_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASEM8_BL1_DTL0_EPS1_FL0_GRVW4_GSU1_ISA908_IU1_K1_KLA_LPA0_LPB0_LDL1_NLCA1_NLCB1_PBD0_PK0_PGR1_PLR1_RK1_SU32_SNLL0_TT4_4_USFGRO1_VAW1_VW4_WG16_32_1_WGM8
  .amdhsa_user_sgpr_kernarg_segment_ptr 1
  .amdhsa_next_free_vgpr 108 // vgprs
  .amdhsa_next_free_sgpr 98 // sgprs
  .amdhsa_group_segment_fixed_size 28672 // lds bytes
  .amdhsa_private_segment_fixed_size 0
  .amdhsa_system_sgpr_workgroup_id_x 1
  .amdhsa_system_sgpr_workgroup_id_y 1
  .amdhsa_system_sgpr_workgroup_id_z 1
  .amdhsa_system_vgpr_workitem_id 0
.end_amdhsa_kernel
.text

/******************************************/
/* Optimizations and Config:              */
/******************************************/
/* ThreadTile= 4 x 4 */
/* SubGroup= 32 x 16 */
/* VectorWidth=4 */
/* GlobalLoadVectorWidthA=4, GlobalLoadVectorWidthB=4 */
/* DirectToLdsA=False */
/* DirectToLdsB=False */
/* UseSgprForGRO=1 */
.amdgpu_metadata
---
amdhsa.version:
  - 1
  - 0
amdhsa.kernels:
  - .name: Cijk_Alik_Bljk_BBH_MT64x128x64_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASEM8_BL1_DTL0_EPS1_FL0_GRVW4_GSU1_ISA908_IU1_K1_KLA_LPA0_LPB0_LDL1_NLCA1_NLCB1_PBD0_PK0_PGR1_PLR1_RK1_SU32_SNLL0_TT4_4_USFGRO1_VAW1_VW4_WG16_32_1_WGM8
    .symbol: 'Cijk_Alik_Bljk_BBH_MT64x128x64_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASEM8_BL1_DTL0_EPS1_FL0_GRVW4_GSU1_ISA908_IU1_K1_KLA_LPA0_LPB0_LDL1_NLCA1_NLCB1_PBD0_PK0_PGR1_PLR1_RK1_SU32_SNLL0_TT4_4_USFGRO1_VAW1_VW4_WG16_32_1_WGM8.kd'
    .language:                   OpenCL C
    .language_version:
      - 2
      - 0
    .args:
      - .name:            sizeC
        .size:            8
        .offset:          0
        .value_kind:      by_value
        .value_type:      u64
      - .name:            sizeA
        .size:            8
        .offset:          8
        .value_kind:      by_value
        .value_type:      u64
      - .name:            sizeB
        .size:            8
        .offset:          16
        .value_kind:      by_value
        .value_type:      u64
      - .name:            D
        .size:            8
        .offset:          24
        .value_kind:      global_buffer
        .value_type:      struct
        .address_space:   generic
      - .name:            C
        .size:            8
        .offset:          32
        .value_kind:      global_buffer
        .value_type:      struct
        .address_space:   generic
      - .name:            A
        .size:            8
        .offset:          40
        .value_kind:      global_buffer
        .value_type:      struct
        .address_space:   generic
      - .name:            B
        .size:            8
        .offset:          48
        .value_kind:      global_buffer
        .value_type:      struct
        .address_space:   generic
      - .name:            alpha
        .size:            4
        .offset:          56
        .value_kind:      by_value
        .value_type:      f32
      - .name:            beta
        .size:            4
        .offset:          60
        .value_kind:      by_value
        .value_type:      f32
      - .name:            strideD0
        .size:            4
        .offset:          64
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideD1
        .size:            4
        .offset:          68
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideC0
        .size:            4
        .offset:          72
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideC1
        .size:            4
        .offset:          76
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideA0
        .size:            4
        .offset:          80
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideA1
        .size:            4
        .offset:          84
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideB0
        .size:            4
        .offset:          88
        .value_kind:      by_value
        .value_type:      u32
      - .name:            strideB1
        .size:            4
        .offset:          92
        .value_kind:      by_value
        .value_type:      u32
      - .name:            SizesFree0
        .size:            4
        .offset:          96
        .value_kind:      by_value
        .value_type:      u32
      - .name:            SizesFree1
        .size:            4
        .offset:          100
        .value_kind:      by_value
        .value_type:      u32
      - .name:            SizesFree2
        .size:            4
        .offset:          104
        .value_kind:      by_value
        .value_type:      u32
      - .name:            SizesSum0
        .size:            4
        .offset:          108
        .value_kind:      by_value
        .value_type:      u32
      - .name:            OrigStaggerUIter
        .size:            4
        .offset:          112
        .value_kind:      by_value
        .value_type:      i32
      - .name:            NumWorkGroups0
        .size:            4
        .offset:          116
        .value_kind:      by_value
        .value_type:      u32
      - .name:            NumWorkGroups1
        .size:            4
        .offset:          120
        .value_kind:      by_value
        .value_type:      u32
      - .name:            MagicNumberProblemNumGroupTiles0
        .size:            4
        .offset:          124
        .value_kind:      by_value
        .value_type:      u32
      - .name:            GridNumWorkGroups0
        .size:            4
        .offset:          128
        .value_kind:      by_value
        .value_type:      u32
      - .name:            NumFullBlocks
        .size:            4
        .offset:          132
        .value_kind:      by_value
        .value_type:      u32
      - .name:            WgmRemainder1
        .size:            4
        .offset:          136
        .value_kind:      by_value
        .value_type:      u32
      - .name:            MagicNumberWgmRemainder1
        .size:            4
        .offset:          140
        .value_kind:      by_value
        .value_type:      u32
      - .name:            padding
        .size:            4
        .offset:          144
        .value_kind:      by_value
        .value_type:      u32
    .group_segment_fixed_size:   28672
    .kernarg_segment_align:      8
    .kernarg_segment_size:       152
    .max_flat_workgroup_size:    256
    .private_segment_fixed_size: 0
    .sgpr_count:                 98
    .sgpr_spill_count:           0
    .vgpr_count:                 108
    .vgpr_spill_count:           0
    .wavefront_size:             64
...
.end_amdgpu_metadata
Cijk_Alik_Bljk_BBH_MT64x128x64_SE_APM1_AF0EM8_AF1EM1_AMAS3_ASEM8_BL1_DTL0_EPS1_FL0_GRVW4_GSU1_ISA908_IU1_K1_KLA_LPA0_LPB0_LDL1_NLCA1_NLCB1_PBD0_PK0_PGR1_PLR1_RK1_SU32_SNLL0_TT4_4_USFGRO1_VAW1_VW4_WG16_32_1_WGM8:

.set BufferOOB, 0x80000000

///////////////implementation description///////////////////////
/////1. 2wave/simd solution.  8 waves/wg split into 2 groups of 4waves
/////   one group (called fetch group) dedeicated fetching elements for A&B for macro-tile
/////   other group does math for macro-tile
/////2. each thread group generate a 64X128. by multiply block A(64XK) and block B (KX128).
/////3. each thread group's input block A addressed by thread gourp idy,  block B addressed by thread gourp idx.
/////4. each thread group has 4 waves.
/////5. each wave generate a 64X32,  by multiply block A(64XK) and block B (KX32)
/////6. in each loop, each wave multiply block A(64X32) and block B (32X32),  wave mem data load as belowing: 
///           Matrix A (K)                       Matrix B (N)
///           ---------32              --------4-------8------12-------16---------32---------- 64------------128----------
///           0   w0Ab0                -       |       |       |       |          |            |              |             |            |
///           4   w0Ab1                -       |       |       |       |          |            |              |             |            |
///           8   w0Ab2                -       |       |       |       |          |            |              |             |            |
///          12   w0Ab3                -       |       |       |       |          |            |              |             |            |
///      (M) 16   w1Ab0           (K)  - w0Bb0 | w0Bb1 | w0Bb2 | w0Bb3 | w0Bb[4-7]| w1Bb[0-7] |  w2Bb[0-7]  | w3Bb[0-7]
///           -                        -       |       |       |       |          |            |              |             |            |
///          ...                       -       |       |       |       |          |            |              |             |            |
///          32   w2Ab0                -       |       |       |       |          |            |              |             |            |
///          ...                      32       |       |       |       |          |            |              |             |            |
///          48   w3Ab0
///          ..
///          60   w3Ab3
///      5.1  Ab means Matrix A block M(4)*K(32),  Bb means Matrix B block K(32)*N(4).  
///      5.2  w0Ab0 means wave 0 Matrix A first loading block. 
/////6. all of the data in step 5 are loaded into LDS directly with buffer_load lds:1. 
/////   in lds, the data stored location followed the order:  w0 -> w1 -> w2-> w3.

//////sreg def/////////////

.set sgprKernArgAddress ,0 
.set sgprWorkGroup0 ,2
.set sgprWorkGroup1 ,3
.set sgprWorkGroup2 ,4
.set sgprNumWorkGroups0,5
.set sgprNumWorkGroups1,6
.set sgprSrdA,8
.set sgprSrdB,12
.set sgprSrdC,16
.set sgprSrdD,20
.set sgprTensor2dSizeC,24
.set sgprTensor2dSizeA,26
.set sgprTensor2dSizeB,28
.set sgprSaveExecMask,30
.set sgprAddressD,32
.set sgprAddressC,34
.set sgprStridesD,36
.set sgprStridesC,38
.set sgprAlpha,40
.set sgprBeta,41
.set sgprSizesFree ,42
.set sgprSizesSum  ,45
.set sgprLoopCounters,46
.set sgprOrigLoopCounter,47
.set sgprStridesA,48
.set sgprStridesB,50
.set sgprAddressA,52
.set sgprAddressB,54
.set sgprShadowLimitA,56
.set sgprShadowLimitB,58
.set sgprOrigStaggerUIter,60
.set sgprStaggerUIter,61
.set sgprWrapUA,62
.set sgprWrapUB,64
.set sgprNumFullBlocks,66
.set sgprWgmRemainder1,67
.set sgprMagicNumberWgmRemainder1,68
.set sgprGlobalReadIncsA,69
.set sgprGlobalReadIncsB,70
.set sgprScalarGlobalReadOffsetA,71
.set sgprScalarGlobalReadOffsetB,74
.set sgprLocalWriteAddrA,88
.set sgprLocalWriteAddrB,90
.set sgprLoopIdx ,94
.set hw_id ,95


/////vreg def////////////////

.set vgprValuC,0
.set vgprAcc,0
.set vgprValuA_X0_I0,32
.set vgprG2LA,48
.set vgprValuB_X0_I0,52
.set vgprG2LB,68
.set vgprLocalWriteAddrA,76
.set vgprLocalWriteAddrB,78
.set vgprGlobalReadOfvarA,82
.set vgprGlobalReadOfvarB,86
.set vgprLocalReadAddrA,94
.set vgprLocalReadAddrB,96
.set vgprSerial,100
.set vgprGlobalWriteOfvarC,104
.set vgprTmp,106

////constant def/////////////
.set varlds_pad            , 8
.set varlds_pad_qw         , varlds_pad >> 2
.set varlds_Asize_per_wr   , 256+varlds_pad                  //each load inst load one 32X4 block.    need contiunous 32X4X2=256    bytes in LDS
.set varlds_Asize_per_wave , varlds_Asize_per_wr * 4   //each wave load 4 32X4 block one time.  need contiunous 32X4X4X2=1024 bytes in LDS
.set varlds_Asize_per_wg   , varlds_Asize_per_wave * 4 //WG load 16 32X4 block(64X32) Matrix A to lds for pingpong.
.set M_row_per_WG          , 64       //each WG process 64 row
.set varlds_Bsize_per_wr   , 256+varlds_pad             //each load inst load one 32X4  block.    need contiunous 32X4X2=256     bytes in LDS
.set varlds_Bsize_per_wave , varlds_Bsize_per_wr * 8   //each wave load seperate 32X64 block.    need contiunous 32X4X8X2=2048 bytes in LDS
.set varlds_Bsize_per_wg   , varlds_Bsize_per_wave * 4  //WG load 64 32X4 block(32X256) Matrix B to lds for pingpong.
.set varA_lds_base_addr    , 0
.set varB_lds_base_addr    , varA_lds_base_addr+varlds_Asize_per_wg * 2  //in bytes

/******************************************/
/* 2GB limit - set offsets to -1 to exceed this and clamp */
/******************************************/
.set BufferLimit,0x80000000

/******************************************/
/* Bits 127:96 of SRD.  Set DataFormat = 32 bit */
/******************************************/
.set Srd127_96,0x0020000

.long 0xC0020680, 0x00000008
.long 0xC00206C0, 0x0000000C
.long 0xC0020700, 0x00000010
.long 0xC0020740, 0x00000014
.long 0xC0020D00, 0x00000028
.long 0xC0020D40, 0x0000002C
.long 0xC0020D80, 0x00000030
.long 0xC0020DC0, 0x00000034
.long 0xC0020C00, 0x00000050
.long 0xC0020C40, 0x00000054
.long 0xC0020C80, 0x00000058
.long 0xC0020CC0, 0x0000005C
.long 0xC0020B40, 0x0000006C
.long 0xBEFC00FF, 0x00003000
.long 0x7EC80300
.long 0x26CA00BF
.long 0x2004C886
.long 0x7EA40502
.long 0xB8D0F804
.long 0xD1130004, 0x0000A0B0
.long 0x20CC0884
.long 0x7EA40566
.long 0xD1130067, 0x0000A08F
.long 0x7EA20567
.long 0xBF068151
.long 0xBF84011A
.long 0xBF8CC07F
.long 0xBE880034
.long 0xBE890035
.long 0xBE8B00FF, 0x00020000
.long 0x80B8541A
.long 0x80B9551A
.long 0x8EB88138
.long 0x80388438
.long 0x82398039
.long 0xBF068039
.long 0x850AFF38, 0x80000000
.long 0xBE8A00FF, 0x80000000
.long 0x9254C030
.long 0x92545402
.long 0x8E558452
.long 0x92533055
.long 0x81545354
.long 0x2000CA84
.long 0xD2850004, 0x00020030
.long 0x2602CA8F
.long 0x24020281
.long 0x32A40304
.long 0x68A4A454
.long 0x24A4A481
.long 0x8E478330
.long 0x80C7FF47, 0x00000108
.long 0x68A6A447
.long 0x68A8A647
.long 0x68AAA847
.long 0xBECC00FF, 0x00000420
.long 0x924C4C52
.long 0xBE8C0036
.long 0xBE8D0037
.long 0xBE8F00FF, 0x00020000
.long 0x80BA541C
.long 0x80BB551C
.long 0x8EBA813A
.long 0x803A843A
.long 0x823B803B
.long 0xBF06803B
.long 0x850EFF3A, 0x80000000
.long 0xBE8E00FF, 0x80000000
.long 0x9254FF32, 0x00000080
.long 0x92545403
.long 0x925532A0
.long 0x92555552
.long 0x81545554
.long 0x2004CA84
.long 0x2606CA8F
.long 0x24060681
.long 0xD2850004, 0x00020432
.long 0x32AC0704
.long 0x68ACAC54
.long 0x24ACAC81
.long 0x8E4A8332
.long 0x80CAFF4A, 0x00000108
.long 0x68AEAC4A
.long 0x68B0AE4A
.long 0x68B2B04A
.long 0x68B4B24A
.long 0x68B6B44A
.long 0x68B8B64A
.long 0x68BAB84A
.long 0xBECE00FF, 0x00000840
.long 0x924E4E52
.long 0x814EFF4E, 0x00002100
.long 0xBF8A0000
.long 0xBEFC004C
.long 0x814DFF4C, 0x00001080
.long 0xE0511000, 0x80023052
.long 0xE0511108, 0x80023153
.long 0xBF800001
.long 0xE0511210, 0x80023254
.long 0xE0511318, 0x80023355
.long 0xBEFC004E
.long 0x814FFF4E, 0x00002100
.long 0xE0511000, 0x80034456
.long 0xE0511108, 0x80034557
.long 0xBF800001
.long 0xE0511210, 0x80034658
.long 0xE0511318, 0x80034759
.long 0xBF800001
.long 0xE0511420, 0x8003485A
.long 0xE0511528, 0x8003495B
.long 0xBF800001
.long 0xE0511630, 0x80034A5C
.long 0xE0511738, 0x80034B5D
.long 0xBEFC004D
.long 0x68A4A4C0
.long 0x68A6A6C0
.long 0x68A8A8C0
.long 0x68AAAAC0
.long 0x68ACACC0
.long 0x68AEAEC0
.long 0x68B0B0C0
.long 0x68B2B2C0
.long 0x68B4B4C0
.long 0x68B6B6C0
.long 0x68B8B8C0
.long 0x68BABAC0
.long 0xE0511000, 0x80023052
.long 0xE0511108, 0x80023153
.long 0xBF800001
.long 0xE0511210, 0x80023254
.long 0xE0511318, 0x80023355
.long 0xBEFC004F
.long 0xBF800000
.long 0xE0511000, 0x80034456
.long 0xE0511108, 0x80034557
.long 0xBF800001
.long 0xE0511210, 0x80034658
.long 0xE0511318, 0x80034759
.long 0xBF800001
.long 0xE0511420, 0x8003485A
.long 0xE0511528, 0x8003495B
.long 0xBF800001
.long 0xE0511630, 0x80034A5C
.long 0xE0511738, 0x80034B5D
.long 0x68A4A4C0
.long 0x68A6A6C0
.long 0x68A8A8C0
.long 0x68AAAAC0
.long 0x68ACACC0
.long 0x68AEAEC0
.long 0x68B0B0C0
.long 0x68B2B2C0
.long 0x68B4B4C0
.long 0x68B6B6C0
.long 0x68B8B8C0
.long 0x68BABAC0
.long 0xBEFC004C
.long 0xBF8C4F74
.long 0xBF8A0000
.long 0xBF8C0F7C
.long 0xBF8A0000
.long 0x8F2E852D
.long 0x80AE2E80
.long 0xBF06802E
.long 0xBF850062
.long 0xE0511000, 0x80023052
.long 0xE0511108, 0x80023153
.long 0xE0511210, 0x80023254
.long 0xE0511318, 0x80023355
.long 0xBEFC004E
.long 0xBF800000
.long 0xE0511000, 0x80034456
.long 0xE0511108, 0x80034557
.long 0xE0511210, 0x80034658
.long 0xE0511318, 0x80034759
.long 0xE0511420, 0x8003485A
.long 0xE0511528, 0x8003495B
.long 0xE0511630, 0x80034A5C
.long 0xE0511738, 0x80034B5D
.long 0xBF8C4F74
.long 0xBF8F0001
.long 0xBF8A0000
.long 0x68A4A4C0
.long 0x68A6A6C0
.long 0x68A8A8C0
.long 0x68AAAAC0
.long 0x68ACACC0
.long 0x68AEAEC0
.long 0x68B0B0C0
.long 0x68B2B2C0
.long 0x68B4B4C0
.long 0xBF8F0000
.long 0xBF8C0F7C
.long 0xBF8F0001
.long 0xBF8A0000
.long 0x68B6B6C0
.long 0x68B8B8C0
.long 0x68BABAC0
.long 0xBF8F0000
.long 0xBEFC004D
.long 0x802E812E
.long 0xE0511000, 0x80023052
.long 0xE0511108, 0x80023153
.long 0xE0511210, 0x80023254
.long 0xE0511318, 0x80023355
.long 0xBEFC004F
.long 0xBF800000
.long 0xE0511000, 0x80034456
.long 0xE0511108, 0x80034557
.long 0xE0511210, 0x80034658
.long 0xE0511318, 0x80034759
.long 0xE0511420, 0x8003485A
.long 0xE0511528, 0x8003495B
.long 0xE0511630, 0x80034A5C
.long 0xE0511738, 0x80034B5D
.long 0xBF8C4F74
.long 0xBF8A0000
.long 0xBF8F0001
.long 0x68A4A4C0
.long 0x68A6A6C0
.long 0x68A8A8C0
.long 0x68AAAAC0
.long 0x68ACACC0
.long 0x68AEAEC0
.long 0x68B0B0C0
.long 0x68B2B2C0
.long 0x68B4B4C0
.long 0xBF8F0000
.long 0xBF8C0F7C
.long 0xBF8A0000
.long 0xBF8F0001
.long 0x68B6B6C0
.long 0x68B8B8C0
.long 0x68BABAC0
.long 0xBF8F0000
.long 0xBEFC004C
.long 0x802E812E
.long 0xBF00C22E
.long 0xBF84FF9E
.long 0xBF8C0F78
.long 0xBF8A0000
.long 0xBF8C0F70
.long 0xBF8A0000
.long 0xBF810000
.long 0xD3D94000, 0x18000080
.long 0xD3D94001, 0x18000080
.long 0xD3D94002, 0x18000080
.long 0xD3D94003, 0x18000080
.long 0xD3D94004, 0x18000080
.long 0xD3D94005, 0x18000080
.long 0xD3D94006, 0x18000080
.long 0xD3D94007, 0x18000080
.long 0xD3D94008, 0x18000080
.long 0xD3D94009, 0x18000080
.long 0xD3D9400A, 0x18000080
.long 0xD3D9400B, 0x18000080
.long 0xD3D9400C, 0x18000080
.long 0xD3D9400D, 0x18000080
.long 0xD3D9400E, 0x18000080
.long 0xD3D9400F, 0x18000080
.long 0xD3D94010, 0x18000080
.long 0xD3D94011, 0x18000080
.long 0xD3D94012, 0x18000080
.long 0xD3D94013, 0x18000080
.long 0xD3D94014, 0x18000080
.long 0xD3D94015, 0x18000080
.long 0xD3D94016, 0x18000080
.long 0xD3D94017, 0x18000080
.long 0xD3D94018, 0x18000080
.long 0xD3D94019, 0x18000080
.long 0xD3D9401A, 0x18000080
.long 0xD3D9401B, 0x18000080
.long 0xD3D9401C, 0x18000080
.long 0xD3D9401D, 0x18000080
.long 0xD3D9401E, 0x18000080
.long 0xD3D9401F, 0x18000080
.long 0xC0020800, 0x00000018
.long 0xC0020840, 0x0000001C
.long 0xC0020880, 0x00000020
.long 0xC00208C0, 0x00000024
.long 0xC0020600, 0x00000000
.long 0xC0020640, 0x00000004
.long 0xC0020A00, 0x00000038
.long 0xC0020900, 0x00000040
.long 0xC0020940, 0x00000044
.long 0xC0020980, 0x00000048
.long 0xC00209C0, 0x0000004C
.long 0xC0020A80, 0x00000060
.long 0xC0020AC0, 0x00000064
.long 0xC0020B00, 0x00000068
.long 0xBF8A0000
.long 0xD1130001, 0x00013F65
.long 0xD285005E, 0x00020290
.long 0x20020282
.long 0xD2850001, 0x00020282
.long 0x68BCBD01
.long 0x2002CA85
.long 0x68BCBD01
.long 0x24BCBC82
.long 0x68BCBC80
.long 0x68BEBCFF, 0x00001080
.long 0xD1130001, 0x00013F65
.long 0xD2850060, 0x00020290
.long 0x20020282
.long 0xD2850001, 0x00020282
.long 0x68C0C101
.long 0x2002CA85
.long 0x68C0C101
.long 0x24C0C082
.long 0x9254FF52, 0x00000840
.long 0x68C0C054
.long 0x68C0C0FF, 0x00002100
.long 0x68C2C0FF, 0x00002100
.long 0xBF8CC07F
.long 0xBE900022
.long 0xBE910023
.long 0xBE9200FF, 0x80000000
.long 0xBE9300FF, 0x00020000
.long 0xBE940020
.long 0xBE950021
.long 0xBE9600FF, 0x80000000
.long 0xBE9700FF, 0x00020000
.long 0x925603FF, 0x00000080
.long 0x96552656
.long 0x92542656
.long 0x8ED48154
.long 0x80105410
.long 0x82115511
.long 0x80145414
.long 0x82155515
.long 0x96552704
.long 0x92542704
.long 0x8ED48154
.long 0x80105410
.long 0x82115511
.long 0x80145414
.long 0x82155515
.long 0x24C8CC86
.long 0x68C8C965
.long 0xD2850004, 0x0002CCA0
.long 0xD2850003, 0x00004D04
.long 0x2608C89F
.long 0xD2850005, 0x00004D04
.long 0x2608C8BF
.long 0x200C0885
.long 0x240C0C82
.long 0x68D60B03
.long 0x925402C0
.long 0x32D40C54
.long 0xD1FE0068, 0x0206D76A
.long 0xBF8A0000
.long 0xD86C0000, 0x2000005E
.long 0xD86C0840, 0x2100005E
.long 0xD86C0008, 0x2200005E
.long 0xD86C0848, 0x2300005E
.long 0xD86C0010, 0x2400005E
.long 0xD86C0850, 0x2500005E
.long 0xD86C0018, 0x2600005E
.long 0xD86C0858, 0x2700005E
.long 0xD86C0020, 0x2800005E
.long 0xD86C0860, 0x2900005E
.long 0xD86C0028, 0x2A00005E
.long 0xD86C0868, 0x2B00005E
.long 0xD86C0030, 0x2C00005E
.long 0xD86C0870, 0x2D00005E
.long 0xD86C0038, 0x2E00005E
.long 0xBF8A0000
.long 0xD86C0000, 0x34000060
.long 0xD86C0008, 0x35000060
.long 0xD86C0010, 0x36000060
.long 0xD86C0018, 0x37000060
.long 0x8F2E852D
.long 0x80AE2E80
.long 0xBF06802E
.long 0xBF8501B8
.long 0xBF8CC37F
.long 0xD3EC0000, 0x04026920
.long 0xD86C0878, 0x2F00005E
.long 0xD86C0020, 0x38000060
.long 0xD86C0028, 0x39000060
.long 0xD86C0030, 0x3A000060
.long 0xD86C0038, 0x3B000060
.long 0xD3EC0010, 0x04426921
.long 0xBF8CC57F
.long 0xD3EC0000, 0x04026B22
.long 0xD3EC0010, 0x04426B23
.long 0xD3EC0000, 0x04026D24
.long 0xD3EC0010, 0x04426D25
.long 0xD3EC0000, 0x04026F26
.long 0xD3EC0010, 0x04426F27
.long 0xBF8CC07F
.long 0xD3EC0000, 0x04027128
.long 0xD3EC0010, 0x04427129
.long 0xD3EC0000, 0x0402732A
.long 0xBF8F0000
.long 0xD3EC0010, 0x0442732B
.long 0xBF8A0000
.long 0xD86C0000, 0x2000005F
.long 0xD86C0840, 0x2100005F
.long 0xD3EC0000, 0x0402752C
.long 0xD86C0008, 0x2200005F
.long 0xD86C0848, 0x2300005F
.long 0xD86C0010, 0x2400005F
.long 0xD86C0850, 0x2500005F
.long 0xD3EC0010, 0x0442752D
.long 0xD86C0018, 0x2600005F
.long 0xD86C0858, 0x2700005F
.long 0xD86C0020, 0x2800005F
.long 0xD86C0860, 0x2900005F
.long 0xD3EC0000, 0x0402772E
.long 0xD86C0028, 0x2A00005F
.long 0xD86C0868, 0x2B00005F
.long 0xD86C0030, 0x2C00005F
.long 0xD86C0870, 0x2D00005F
.long 0xD3EC0010, 0x0442772F
.long 0xD86C0038, 0x2E00005F
.long 0xBF8A0000
.long 0xD86C0000, 0x3C000061
.long 0xD86C0008, 0x3D000061
.long 0xD86C0010, 0x3E000061
.long 0xD86C0018, 0x3F000061
.long 0xBF8F0001
.long 0x802E812E
.long 0xBF8CC37F
.long 0xD3EC0000, 0x04027920
.long 0xD86C0878, 0x2F00005F
.long 0xD86C0020, 0x40000061
.long 0xD86C0028, 0x41000061
.long 0xD86C0030, 0x42000061
.long 0xD86C0038, 0x43000061
.long 0xD3EC0010, 0x04427921
.long 0xBF8CC57F
.long 0xD3EC0000, 0x04027B22
.long 0xD3EC0010, 0x04427B23
.long 0xD3EC0000, 0x04027D24
.long 0xD3EC0010, 0x04427D25
.long 0xD3EC0000, 0x04027F26
.long 0xD3EC0010, 0x04427F27
.long 0xBF8CC07F
.long 0xD3EC0000, 0x04028128
.long 0xD3EC0010, 0x04428129
.long 0xD3EC0000, 0x0402832A
.long 0xBF8F0000
.long 0xD3EC0010, 0x0442832B
.long 0xBF8A0000
.long 0xD86C0000, 0x2000005E
.long 0xD86C0840, 0x2100005E
.long 0xD3EC0000, 0x0402852C
.long 0xD86C0008, 0x2200005E
.long 0xD86C0848, 0x2300005E
.long 0xD86C0010, 0x2400005E
.long 0xD86C0850, 0x2500005E
.long 0xD3EC0010, 0x0442852D
.long 0xD86C0018, 0x2600005E
.long 0xD86C0858, 0x2700005E
.long 0xD86C0020, 0x2800005E
.long 0xD86C0860, 0x2900005E
.long 0xD3EC0000, 0x0402872E
.long 0xD86C0028, 0x2A00005E
.long 0xD86C0868, 0x2B00005E
.long 0xD86C0030, 0x2C00005E
.long 0xD86C0870, 0x2D00005E
.long 0xD3EC0010, 0x0442872F
.long 0xD86C0038, 0x2E00005E
.long 0xBF8A0000
.long 0xD86C0000, 0x34000060
.long 0xD86C0008, 0x35000060
.long 0xD86C0010, 0x36000060
.long 0xD86C0018, 0x37000060
.long 0xBF8F0001
.long 0x802E812E
.long 0xBF00C22E
.long 0xBF84FF4E
.long 0xBF8CC37F
.long 0xD3EC0000, 0x04026920
.long 0xD86C0878, 0x2F00005E
.long 0xD86C0020, 0x38000060
.long 0xD86C0028, 0x39000060
.long 0xD86C0030, 0x3A000060
.long 0xD86C0038, 0x3B000060
.long 0xD3EC0010, 0x04426921
.long 0xBF8CC57F
.long 0xD3EC0000, 0x04026B22
.long 0xD3EC0010, 0x04426B23
.long 0xD3EC0000, 0x04026D24
.long 0xD3EC0010, 0x04426D25
.long 0xD3EC0000, 0x04026F26
.long 0xD3EC0010, 0x04426F27
.long 0xBF8CC07F
.long 0xD3EC0000, 0x04027128
.long 0xD3EC0010, 0x04427129
.long 0xD3EC0000, 0x0402732A
.long 0xD3EC0010, 0x0442732B
.long 0xBF8A0000
.long 0xD86C0000, 0x2000005F
.long 0xD86C0840, 0x2100005F
.long 0xD3EC0000, 0x0402752C
.long 0xD86C0008, 0x2200005F
.long 0xD86C0848, 0x2300005F
.long 0xD86C0010, 0x2400005F
.long 0xD86C0850, 0x2500005F
.long 0xD3EC0010, 0x0442752D
.long 0xD86C0018, 0x2600005F
.long 0xD86C0858, 0x2700005F
.long 0xD86C0020, 0x2800005F
.long 0xD86C0860, 0x2900005F
.long 0xD3EC0000, 0x0402772E
.long 0xD86C0028, 0x2A00005F
.long 0xD86C0868, 0x2B00005F
.long 0xD86C0030, 0x2C00005F
.long 0xD86C0870, 0x2D00005F
.long 0xD3EC0010, 0x0442772F
.long 0xBF8A0000
.long 0xD86C0038, 0x2E00005F
.long 0xD86C0000, 0x3C000061
.long 0xD86C0008, 0x3D000061
.long 0xD86C0010, 0x3E000061
.long 0xD86C0018, 0x3F000061
.long 0xBF8CC37F
.long 0xD3EC0000, 0x04027920
.long 0xD86C0878, 0x2F00005F
.long 0xD86C0020, 0x40000061
.long 0xD86C0028, 0x41000061
.long 0xD86C0030, 0x42000061
.long 0xD86C0038, 0x43000061
.long 0xD3EC0010, 0x04427921
.long 0xBF8CC57F
.long 0xD3EC0000, 0x04027B22
.long 0xD3EC0010, 0x04427B23
.long 0xD3EC0000, 0x04027D24
.long 0xD3EC0010, 0x04427D25
.long 0xD3EC0000, 0x04027F26
.long 0xD3EC0010, 0x04427F27
.long 0xBF8CC07F
.long 0xD3EC0000, 0x04028128
.long 0xD3EC0000, 0x0402832A
.long 0xD3EC0000, 0x0402852C
.long 0xD3EC0000, 0x0402872E
.long 0xBED400FF, 0xFFFF0000
.long 0x2AD6D56A
.long 0x28D6D654
.long 0xD3EC0010, 0x04428129
.long 0xD3D84000, 0x18000100
.long 0xD3D84001, 0x18000101
.long 0xD3D84002, 0x18000102
.long 0xD3D84003, 0x18000103
.long 0xD3D84004, 0x18000104
.long 0xD3D84005, 0x18000105
.long 0xD3D84006, 0x18000106
.long 0xD3D84007, 0x18000107
.long 0x20000090
.long 0xD2010000, 0x0402D701
.long 0x20040490
.long 0xD2010001, 0x040AD703
.long 0x20080890
.long 0xD2010002, 0x0412D705
.long 0xD3EC0010, 0x0442832B
.long 0xE0741000, 0x80050068
.long 0x200C0C90
.long 0xD2010003, 0x041AD707
.long 0xD3EC0010, 0x0442852D
.long 0xE0741010, 0x80050268
.long 0xD3D84008, 0x18000108
.long 0xD3D84009, 0x18000109
.long 0xD3D8400A, 0x1800010A
.long 0xD3D8400B, 0x1800010B
.long 0xD3EC0010, 0x0442872F
.long 0x20101090
.long 0xD2010004, 0x0422D709
.long 0x20141490
.long 0xD2010005, 0x042AD70B
.long 0xD3D8400C, 0x1800010C
.long 0xD3D8400D, 0x1800010D
.long 0xD3D8400E, 0x1800010E
.long 0xD3D8400F, 0x1800010F
.long 0xE0741020, 0x80050468
.long 0x20181890
.long 0xD2010006, 0x0432D70D
.long 0x201C1C90
.long 0xD2010007, 0x043AD70F
.long 0xE0741030, 0x80050668
.long 0xD3D84000, 0x18000110
.long 0xD3D84001, 0x18000111
.long 0xD3D84002, 0x18000112
.long 0xD3D84003, 0x18000113
.long 0xD3D84004, 0x18000114
.long 0xD3D84005, 0x18000115
.long 0xD3D84006, 0x18000116
.long 0xD3D84007, 0x18000117
.long 0x20000090
.long 0xD2010000, 0x0402D701
.long 0x20040490
.long 0xD2010001, 0x040AD703
.long 0x20080890
.long 0xD2010002, 0x0412D705
.long 0xE0741040, 0x80050068
.long 0x200C0C90
.long 0xD2010003, 0x041AD707
.long 0xD3D84008, 0x18000118
.long 0xD3D84009, 0x18000119
.long 0xD3D8400A, 0x1800011A
.long 0xD3D8400B, 0x1800011B
.long 0xE0741050, 0x80050268
.long 0x20101090
.long 0xD2010004, 0x0422D709
.long 0x20141490
.long 0xD2010005, 0x042AD70B
.long 0xD3D8400C, 0x1800011C
.long 0xD3D8400D, 0x1800011D
.long 0xD3D8400E, 0x1800011E
.long 0xD3D8400F, 0x1800011F
.long 0xE0741060, 0x80050468
.long 0x20181890
.long 0xD2010006, 0x0432D70D
.long 0x201C1C90
.long 0xD2010007, 0x043AD70F
.long 0xE0741070, 0x80050668
.long 0xBF8C0000
.long 0xBF810000
